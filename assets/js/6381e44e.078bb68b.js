"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[8072],{3905:(t,n,e)=>{e.d(n,{Zo:()=>m,kt:()=>_});var a=e(7294);function l(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function r(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?r(Object(e),!0).forEach((function(n){l(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function p(t,n){if(null==t)return{};var e,a,l=function(t,n){if(null==t)return{};var e,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||(l[e]=t[e]);return l}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(l[e]=t[e])}return l}var d=a.createContext({}),o=function(t){var n=a.useContext(d),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},m=function(t){var n=o(t.components);return a.createElement(d.Provider,{value:n},t.children)},s="mdxType",c={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(t,n){var e=t.components,l=t.mdxType,r=t.originalType,d=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),s=o(e),u=l,_=s["".concat(d,".").concat(u)]||s[u]||c[u]||r;return e?a.createElement(_,i(i({ref:n},m),{},{components:e})):a.createElement(_,i({ref:n},m))}));function _(t,n){var e=arguments,l=n&&n.mdxType;if("string"==typeof t||l){var r=e.length,i=new Array(r);i[0]=u;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=t,p[s]="string"==typeof t?t:l,i[1]=p;for(var o=2;o<r;o++)i[o]=e[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}u.displayName="MDXCreateElement"},8171:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var a=e(7462),l=(e(7294),e(3905));const r={slug:"/",sidebar_position:5},i=void 0,p={unversionedId:"\u9644\u5f55/\u6848\u4f8b",id:"\u9644\u5f55/\u6848\u4f8b",title:"\u6848\u4f8b",description:"\u8bfb\u53d6BMP\u6587\u4ef6",source:"@site/docs/\u9644\u5f55/\u6848\u4f8b.md",sourceDirName:"\u9644\u5f55",slug:"/",permalink:"/docs/",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{slug:"/",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"5\u81ea\u7136\u8bed\u8a00\u5904\u7406NLP",permalink:"/docs/\u7b2c4\u90e8\u5206\u795e\u7ecf\u7f51\u7edc\u5165\u95e8/5\u81ea\u7136\u8bed\u8a00\u5904\u7406NLP"},next:{title:"\u6570\u636e\u79d1\u5b66\u5165\u95e8",permalink:"/docs/\u9644\u5f55/\u6570\u636e\u79d1\u5b66\u5165\u95e8"}},d={},o=[{value:"\u8bfb\u53d6BMP\u6587\u4ef6",id:"\u8bfb\u53d6bmp\u6587\u4ef6",level:2},{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3},{value:"\u989c\u8272\u91cf\u5316",id:"\u989c\u8272\u91cf\u5316",level:2},{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0-1",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-1",level:3}],m={toc:o},s="wrapper";function c(t){let{components:n,...e}=t;return(0,l.kt)(s,(0,a.Z)({},m,e,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u8bfb\u53d6bmp\u6587\u4ef6"},"\u8bfb\u53d6BMP\u6587\u4ef6"),(0,l.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,l.kt)("p",null,"\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757\u7684\u524d\u63d0\u4e0b\uff0c\u5b8c\u6210\u5bf924\u4f4dbmp\u56fe\u50cf\u7684\u56fe\u50cf\u6570\u636e\u5206\u6790\u4e0e\u50cf\u7d20\u8bfb\u53d6\u3002\n\u7a0b\u5e8f\u8bbe\u8ba1\u9700\u8981\u4f53\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u7279\u70b9\uff0c\u4ee5\u521b\u5efa\u7c7b\u7684\u5f62\u5f0f\u7f16\u5199\u3002"),(0,l.kt)("p",null,"\u53c2\u8003\u8d44\u6599\uff1a"),(0,l.kt)("p",null,"\u4ee5\u4e00\u5f202*2\u768424\u4f4d\u56fe\u7684bmp\u683c\u5f0f\u56fe\u7247\u4e3a\u4f8b"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Offset"),(0,l.kt)("th",{parentName:"tr",align:null},"Offset10"),(0,l.kt)("th",{parentName:"tr",align:null},"Size"),(0,l.kt)("th",{parentName:"tr",align:null},"Hex value"),(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BMP Header"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0h"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"42 4D"),(0,l.kt)("td",{parentName:"tr",align:null},'"BM"'),(0,l.kt)("td",{parentName:"tr",align:null},"ID field ","(","42h, 4Dh",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2h"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"46\xa000\xa000\xa000"),(0,l.kt)("td",{parentName:"tr",align:null},"70 bytes ","(","54","+","16",")"),(0,l.kt)("td",{parentName:"tr",align:null},"BMP \u6587\u4ef6\u7684\u5927\u5c0f\uff0854 \u5b57\u8282\u6807\u5934 ","+"," 16 \u5b57\u8282\u6570\u636e\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6h"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"Unused"),(0,l.kt)("td",{parentName:"tr",align:null},"\u7279\u5b9a\u5e94\u7528")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"8h"),(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"Unused"),(0,l.kt)("td",{parentName:"tr",align:null},"\u7279\u5b9a\u5e94\u7528")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ah"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"36 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"54 bytes ","(","14","+","40",")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u53ef\u4ee5\u627e\u5230\u50cf\u7d20\u9635\u5217\uff08\u4f4d\u56fe\u6570\u636e\uff09\u7684\u504f\u79fb\u91cf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DIB Header","-","Device Independent Bitmaps","-","\u8bbe\u5907\u65e0\u5173\u4f4d\u56fe"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"14"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"28 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"40 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"DIB \u5934\u4e2d\u7684\u5b57\u8282\u6570\uff08\u4ece\u6b64\u65f6\u5f00\u59cb\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"12h"),(0,l.kt)("td",{parentName:"tr",align:null},"18"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"02 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2 pixels ","(","left to right order",")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u4f4d\u56fe\u7684\u5bbd\u5ea6\uff08\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"16h"),(0,l.kt)("td",{parentName:"tr",align:null},"22"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"02 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2 pixels ","(","bottom to top order",")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u4f4d\u56fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09\u3002\u4ece\u4e0b\u5230\u4e0a\u7684\u50cf\u7d20\u987a\u5e8f\u4e3a\u6b63\u3002")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1Ah"),(0,l.kt)("td",{parentName:"tr",align:null},"26"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"01 00"),(0,l.kt)("td",{parentName:"tr",align:null},"1 plane"),(0,l.kt)("td",{parentName:"tr",align:null},"\u4f7f\u7528\u7684\u989c\u8272\u5e73\u9762\u6570\u91cf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1Ch"),(0,l.kt)("td",{parentName:"tr",align:null},"28"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"18 00"),(0,l.kt)("td",{parentName:"tr",align:null},"24 bits"),(0,l.kt)("td",{parentName:"tr",align:null},"\u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4d\u6570")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"30"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"BI","_","RGB\uff0c\u672a\u4f7f\u7528\u50cf\u7d20\u9635\u5217\u538b\u7f29")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"22h"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"10 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"16 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"\u539f\u59cb\u4f4d\u56fe\u6570\u636e\u7684\u5927\u5c0f\uff08\u5305\u62ec\u586b\u5145\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"26h"),(0,l.kt)("td",{parentName:"tr",align:null},"38"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"13 0B 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2835 pixels/metre horizontal"),(0,l.kt)("td",{parentName:"tr",align:null},"\u56fe\u50cf\u7684\u6253\u5370\u5206\u8fa8\u7387\uff0c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2Ah"),(0,l.kt)("td",{parentName:"tr",align:null},"42"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"13 0B 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2835 pixels/metre vertical"),(0,l.kt)("td",{parentName:"tr",align:null},"72 DPI\xa0\xd7 39",".","3701 inches per metre yields 2834",".","6472")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"46"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 colors"),(0,l.kt)("td",{parentName:"tr",align:null},"\u8c03\u8272\u677f\u4e2d\u7684\u989c\u8272\u6570\u91cf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"32h"),(0,l.kt)("td",{parentName:"tr",align:null},"50"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 important colors"),(0,l.kt)("td",{parentName:"tr",align:null},"0 \u8868\u793a\u6240\u6709\u989c\u8272\u90fd\u5f88\u91cd\u8981")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Start of pixel array ","(","bitmap data",")"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"36h"),(0,l.kt)("td",{parentName:"tr",align:null},"54"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 FF"),(0,l.kt)("td",{parentName:"tr",align:null},"0 0 255"),(0,l.kt)("td",{parentName:"tr",align:null},"Red, Pixel ","(","x=0, y=1",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"39h"),(0,l.kt)("td",{parentName:"tr",align:null},"57"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"FF FF FF"),(0,l.kt)("td",{parentName:"tr",align:null},"255 255 255"),(0,l.kt)("td",{parentName:"tr",align:null},"White, Pixel ","(","x=1, y=1",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3Ch"),(0,l.kt)("td",{parentName:"tr",align:null},"60"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Padding for 4 byte alignment ","(","could be a value other than zero",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"62"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"FF 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"255 0 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue, Pixel ","(","x=0, y=0",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"41h"),(0,l.kt)("td",{parentName:"tr",align:null},"65"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"00 FF 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 255 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Green, Pixel ","(","x=1, y=0",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"44h"),(0,l.kt)("td",{parentName:"tr",align:null},"68"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Padding for 4 byte alignment ","(","could be a value other than zero",")")))),(0,l.kt)("p",null,"bit\uff08\u4f4d\uff09\u6bd4\u7279\u662f\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u57fa\u7840\uff0c\u5c5e\u4e8e\u4e8c\u8fdb\u5236\u7684\u8303\u7574"),(0,l.kt)("p",null,"byte\u5b57\u8282\u662f\u5185\u5b58\u7684\u57fa\u672c\u5355\u4f4d"),(0,l.kt)("p",null,"8 bit = 1 byte"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# \u53c2\u8003\u77e5\u8bc6\n\ndata = b\'\\xff\' # b\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\\x\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u7684\u6570\u636e\n\nbin_data = bin(int.from_bytes(data))[2:]  # -> 11111111\n\nint(bin_data, 2) # -> 255\n\n# \u6253\u5f00\u6587\u4ef6\u4f5c\u4e3a\u53ef\u7f16\u8f91\u5bf9\u8c61\nwith open("r.bmp", "rb") as f:\n    d = f.read()\n    data = bytearray(d)\n# \u8bd5\u7740\u628a54\u5230246\u7684\u6570\u636e\u90fd\u6539\u62100x00\uff0c\u5373\u9ed1\u8272\u3002\u8fd9\u6837\u6574\u5f20\u56fe\u7247\u90fd\u53d8\u6210\u9ed1\u8272\u4e86\nfor i in range(54, 246):\n    data[i]= 0x00\n# \u4fdd\u5b58\u6587\u4ef6\nwith open("black.bmp", "wb") as f:\n    f.write(data)\n')),(0,l.kt)("h3",{id:"\u9898\u89e3"},"\u9898\u89e3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class Readbmp:\n    """\n    read bmp files\n    \u56fe\u7247\u7684\u683c\u5f0f\u8bf4\u660e\uff1ahttps://en.wikipedia.org/wiki/BMP_file_format#Example_1\n    """\n\n    def __init__(self, pic_path) -> None:\n        self.pic_path = pic_path\n        self.read_color()\n\n    def read_color(self):\n        if self.pic_path.endswith(".bmp"):\n            self.read_bmp()\n        else:\n            print("\u4e0d\u652f\u6301\u7684\u683c\u5f0f")\n\n    def read_bmp(self):\n        bin_datas = []\n        """read file data to bin"""\n        with open(self.pic_path, "rb") as f:\n            while True:\n                if len(bin_datas) == f.tell():\n                    data = f.read(1)\n                    bindata = bin(int.from_bytes(data))[2:]\n                    if len(bindata) < 8:\n                        bindata = (8 - len(bindata)) * "0" + bindata\n                    bin_datas.append(bindata)\n                else:\n                    bin_datas = bin_datas[:-1]\n                    break\n\n        self.bin_pic_head = bin_datas[0:2]  # ID field\n        self.bin_pic_size = bin_datas[2:6]  # Size of the BMP file \u6587\u4ef6\u5927\u5c0f\n        self.bin_pic_exe = bin_datas[6:10]  # \u7279\u5b9a\u5e94\u7528\uff0c\u9ed8\u8ba4\u4e3a0\n        self.bin_pic_address = bin_datas[10:14]  # \u56fe\u7247\u4fe1\u606f\u5f00\u59cb\u5730\u5740\n        self.bin_pic_dib = bin_datas[14:18]  # DIB \u5934\u4e2d\u7684\u5b57\u8282\u6570\n        self.bin_pic_w = bin_datas[18:22]  # \u56fe\u7247\u50cf\u7d20\u5bbd\u5ea6\n        self.bin_pic_h = bin_datas[22:26]  # \u56fe\u7247\u50cf\u7d20\u9ad8\u5ea6\n        self.bin_pic_color_num = bin_datas[26:28]  # \u4f7f\u7528\u989c\u8272\u5e73\u9762\u6570\n        self.bin_pic_color_long = bin_datas[28:30]  # \u6bcf\u4e2a\u50cf\u7d20\u4f4d\u6570\n        self.bin_pic_bi = bin_datas[30:34]  # BI_RGB\n        self.bin_pic_big = bin_datas[34:38]  # \u539f\u59cb\u56fe\u50cf\u6570\u636e\u5927\u5c0f\n        self.bin_pic_printpix = bin_datas[38:42]  # \u6253\u5370\u5206\u8fa8\u7387\n        self.bin_pic_dpi = bin_datas[42:46]  # DPI\n        self.bin_pic_color_num = bin_datas[46:50]  # \u8c03\u8272\u677f\u4e2d\u989c\u8272\u6570\u91cf\n        self.bin_pic_color_important = bin_datas[50:54]  # \u91cd\u8981\u989c\u8272\u6570\u91cf\n        self.bin_pic_data = bin_datas[54:]  # \u56fe\u7247\u6570\u636e\n        self.bin_to_pic()\n\n    # \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u5316\u6210\u5341\u8fdb\u5236\u6570\u636e\n    def bin_to_dec(self, bin_datas):\n        bin_data = ""\n        for i in reversed(bin_datas):\n            bin_data += i\n        return int(bin_data, 2)\n\n    # \u5c06\u5217\u8868\u8f6c\u4e3a3\u4e2a\u4e00\u7ec4\u7684\u4e8c\u7ef4\u5217\u8868\n    def change_data(self, data):\n        data_2d = []\n        x = []\n        for i in data:\n            x.append(int(i, 2))\n            if len(x) == 3:\n                data_2d.append(tuple(x))\n                x = []\n        return data_2d\n\n    # \u5904\u7406\u56fe\u7247\u6570\u636e\n    def bin_to_pic(self):\n        self.pic_head = chr(int(self.bin_pic_head[0], 2)) + chr(\n            int(self.bin_pic_head[1], 2)\n        )\n        self.pic_size = self.bin_to_dec(self.bin_pic_size)\n        self.pic_exe = self.bin_to_dec(self.bin_pic_exe)\n        self.pic_address = self.bin_to_dec(self.bin_pic_address)\n        self.pic_dib = self.bin_to_dec(self.bin_pic_dib)\n        self.pic_w = self.bin_to_dec(self.bin_pic_w)\n        self.pic_h = self.bin_to_dec(self.bin_pic_h)\n        self.pic_color_num = self.bin_to_dec(self.bin_pic_color_num)\n        self.pic_color_long = self.bin_to_dec(self.bin_pic_color_long)\n        self.pic_bi = self.bin_to_dec(self.bin_pic_bi)\n        self.pic_big = self.bin_to_dec(self.bin_pic_big)\n        self.pic_printpix = self.bin_to_dec(self.bin_pic_printpix)\n        self.pic_dpi = self.bin_to_dec(self.bin_pic_dpi)\n        self.pic_color_num = self.bin_to_dec(self.bin_pic_color_num)\n        self.pic_color_important = self.bin_to_dec(self.bin_pic_color_important)\n        self.pic_data = self.change_data(self.bin_pic_data)\n\n    # \u6253\u5370\u56fe\u7247\u4fe1\u606f\n    def show(self):\n        print(\n            """\n\u6587\u4ef6ID  {} \n\u56fe\u50cf\u5927\u5c0f(Byte)  {}   \n\u7279\u5b9a\u5e94\u7528  {}   \n\u56fe\u7247\u4fe1\u606f\u5f00\u59cb\u5730\u5740  {}   \nDIB \u5934\u4e2d\u7684\u5b57\u8282\u6570 {}   \n\u56fe\u7247\u50cf\u7d20\u5bbd\u5ea6  {}   \n\u56fe\u7247\u50cf\u7d20\u9ad8\u5ea6  {}   \n\u4f7f\u7528\u989c\u8272\u5e73\u9762\u6570  {}   \n\u6bcf\u4e2a\u50cf\u7d20\u4f4d\u6570  {}   \nBI_RGB  {}   \n\u539f\u59cb\u56fe\u50cf\u6570\u636e\u5927\u5c0f(Byte) {} \n\u6253\u5370\u5206\u8fa8\u7387  {}   \nDPI  {}   \n\u8c03\u8272\u677f\u4e2d\u989c\u8272\u6570\u91cf  {}   \n\u91cd\u8981\u989c\u8272\u6570\u91cf  {}   \n\u56fe\u7247\u6570\u636e  {} .... {} \n""".format(\n                self.pic_head,\n                self.pic_size,\n                self.pic_exe,\n                self.pic_address,\n                self.pic_dib,\n                self.pic_w,\n                self.pic_h,\n                self.pic_color_num,\n                self.pic_color_long,\n                self.pic_bi,\n                self.pic_big,\n                self.pic_printpix,\n                self.pic_dpi,\n                self.pic_color_num,\n                self.pic_color_important,\n                self.pic_data[:5],\n                self.pic_data[-5:],\n            )\n        )\n\n    # \u5224\u65ad\u989c\u8272\n    def color(self, color):\n        b, g, r = color[0], color[1], color[2]\n        if r == 0 and g == 0 and b == 0:\n            return "\u9ed1\u8272"\n        elif r == 0 and g == 0 and b == 255:\n            return "\u84dd\u8272"\n        elif r == 0 and g == 255 and b == 0:\n            return "\u7eff\u8272"\n        elif r == 255 and g == 0 and b == 0:\n            return "\u7ea2\u8272"\n        elif r == 255 and g == 255 and b == 255:\n            return "\u767d\u8272"\n        else:\n            return "\u5176\u4ed6\u989c\u8272"\n\n    # \u7edf\u8ba1\u989c\u8272\n    def count_color(self):\n        color_dict = {}\n        for i in self.pic_data:\n            if i in color_dict:\n                color_dict[i] += 1\n            else:\n                color_dict[i] = 1\n        return color_dict\n\n    # \u5224\u65ad\u989c\u8272\u7684\u6bd4\u4f8b\n    def color_percent(self):\n        color_dict = self.count_color()\n        color_percent_dict = {}\n        for i in color_dict:\n            color_percent_dict[self.color(i)] = int(\n                color_dict[i] / len(self.pic_data) * 100\n            )\n        for i in color_percent_dict:\n            print("{} \u5360\u6bd4\u767e\u5206\u4e4b {}".format(i, color_percent_dict[i]))\n\n\n\n\n\np = Readbmp("r.bmp")  # \u53e6\u5b58\u4e3a\u65b0\u6587\u4ef6\np.color_percent()\n# \u7ea2\u8272 \u5360\u6bd4\u767e\u5206\u4e4b 100\n"""\nr.bmp\u662f8*8\u7684\u4f4d\u56fe\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u70b9\u662f\u7ea2\u8272\uff0c\u5176\u4ed6\u90fd\u662f\u9ed1\u8272\n"""\n# \u6253\u5f00\u6587\u4ef6\u4f5c\u4e3a\u53ef\u7f16\u8f91\u5bf9\u8c61\nwith open("r.bmp", "rb") as f:\n    d = f.read()\n    data = bytearray(d)\n# \u8bd5\u7740\u628a54\u5230246\u7684\u6570\u636e\u90fd\u6539\u62100x00\uff0c\u5373\u9ed1\u8272\u3002\u8fd9\u6837\u6574\u5f20\u56fe\u7247\u90fd\u53d8\u6210\u9ed1\u8272\u4e86\uff08\u4e5f\u53ef\u4ee5\u53ea\u66f4\u6539\u67d0\u4e2a\u6570\u636e\u7aef\uff09\nfor i in range(54, 246):\n    data[i]= 0x00\n# \u4fdd\u5b58\u6587\u4ef6\nwith open("rn.bmp", "wb") as f:\n    f.write(data)\n\np = Readbmp("rn.bmp")\np.show()\np.color_percent()\n# \u9ed1\u8272 \u5360\u6bd4\u767e\u5206\u4e4b 100\n')),(0,l.kt)("h2",{id:"\u989c\u8272\u91cf\u5316"},"\u989c\u8272\u91cf\u5316"),(0,l.kt)("h3",{id:"\u63cf\u8ff0-1"},"\u63cf\u8ff0"),(0,l.kt)("p",null,"\u56fe\u7247\u7684\u989c\u8272\u6570\u91cf\u8d8a\u591a\uff0c\u56fe\u7247\u5c31\u8d8a\u96be\u4ee5\u538b\u7f29\uff0c\u56fe\u7247\u7684\u5927\u5c0f\u5c31\u8d8a\u5927\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u56fe\u7247\u8fdb\u884c\u989c\u8272\u91cf\u5316\uff0c\u51cf\u5c11\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u5c06\u56fe\u50cf\u6240\u9700\u7684\u989c\u8272\u6570\u91cf\u4ece96615\u51cf\u5c11\u523064\uff0c\u540c\u65f6\u4fdd\u6301\u6574\u4f53\u5916\u89c2\u8d28\u91cf\u3002"),(0,l.kt)("p",null,"\u56fe\u50cf\u6765\u6e90",(0,l.kt)("inlineCode",{parentName:"p"},'sklearn.datasets.load_sample_image("china.jpg")')),(0,l.kt)("h3",{id:"\u9898\u89e3-1"},"\u9898\u89e3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin\nfrom sklearn.datasets import load_sample_image\nfrom sklearn.utils import shuffle\nfrom time import time\n\nn_colors = 64\n\n# Load the Summer Palace photo\nchina = load_sample_image("china.jpg")\n\n# Convert to floats instead of the default 8 bits integer coding. Dividing by\n# 255 is important so that plt.imshow behaves works well on float data (need to\n# be in the range [0-1])\nchina = np.array(china, dtype=np.float64) / 255\n\n# Load Image and transform to a 2D numpy array.\nw, h, d = original_shape = tuple(china.shape)\nassert d == 3\nimage_array = np.reshape(china, (w * h, d))\n\nprint("Fitting model on a small sub-sample of the data")\nt0 = time()\nimage_array_sample = shuffle(image_array, random_state=0)[:1000]\nkmeans = KMeans(n_clusters=n_colors, random_state=0).fit(image_array_sample)\nprint("done in %0.3fs." % (time() - t0))\n\n# Get labels for all points\nprint("Predicting color indices on the full image (k-means)")\nt0 = time()\nlabels = kmeans.predict(image_array)\nprint("done in %0.3fs." % (time() - t0))\n\n\ncodebook_random = shuffle(image_array, random_state=0)[:n_colors]\nprint("Predicting color indices on the full image (random)")\nt0 = time()\nlabels_random = pairwise_distances_argmin(codebook_random,\n                                          image_array,\n                                          axis=0)\nprint("done in %0.3fs." % (time() - t0))\n\n\ndef recreate_image(codebook, labels, w, h):\n    """Recreate the (compressed) image from the code book & labels"""\n    d = codebook.shape[1]\n    image = np.zeros((w, h, d))\n    label_idx = 0\n    for i in range(w):\n        for j in range(h):\n            image[i][j] = codebook[labels[label_idx]]\n            label_idx += 1\n    return image\n\n# Display all results, alongside original image\nplt.figure(1)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Original image (96,615 colors)\')\nplt.imshow(china)\n\nplt.figure(2)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Quantized image (64 colors, K-Means)\')\nplt.imshow(recreate_image(kmeans.cluster_centers_, labels, w, h))\n\nplt.figure(3)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Quantized image (64 colors, Random)\')\nplt.imshow(recreate_image(codebook_random, labels_random, w, h))\n\n')))}c.isMDXComponent=!0}}]);