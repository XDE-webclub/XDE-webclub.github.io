"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[9883],{3148:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var t=a(4848),i=a(8453);const o={sidebar_position:0},r=void 0,s={id:"\u7b2c4\u90e8\u5206\u5f53\u4e0b\u524d\u6cbf\u4eba\u5de5\u667a\u80fd/\u989c\u8272\u91cf\u5316",title:"\u989c\u8272\u91cf\u5316",description:"\u989c\u8272\u91cf\u5316",source:"@site/docs/\u7b2c4\u90e8\u5206\u5f53\u4e0b\u524d\u6cbf\u4eba\u5de5\u667a\u80fd/\u989c\u8272\u91cf\u5316.md",sourceDirName:"\u7b2c4\u90e8\u5206\u5f53\u4e0b\u524d\u6cbf\u4eba\u5de5\u667a\u80fd",slug:"/\u7b2c4\u90e8\u5206\u5f53\u4e0b\u524d\u6cbf\u4eba\u5de5\u667a\u80fd/\u989c\u8272\u91cf\u5316",permalink:"/docs/\u7b2c4\u90e8\u5206\u5f53\u4e0b\u524d\u6cbf\u4eba\u5de5\u667a\u80fd/\u989c\u8272\u91cf\u5316",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"\u968f\u673a\u68ee\u6797",permalink:"/docs/\u7b2c3\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/\u968f\u673a\u68ee\u6797"},next:{title:"\u56fe\u50cf\u4e8c\u503c\u5316\u7684\u51e0\u79cd\u65b9\u6cd5",permalink:"/docs/\u7b2c4\u90e8\u5206\u5f53\u4e0b\u524d\u6cbf\u4eba\u5de5\u667a\u80fd/\u56fe\u50cf\u4e8c\u503c\u5316\u7684\u51e0\u79cd\u65b9\u6cd5"}},l={},m=[{value:"\u989c\u8272\u91cf\u5316",id:"\u989c\u8272\u91cf\u5316",level:2},{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\u989c\u8272\u91cf\u5316",children:"\u989c\u8272\u91cf\u5316"}),"\n",(0,t.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,t.jsx)(n.p,{children:"\u56fe\u7247\u7684\u989c\u8272\u6570\u91cf\u8d8a\u591a\uff0c\u56fe\u7247\u5c31\u8d8a\u96be\u4ee5\u538b\u7f29\uff0c\u56fe\u7247\u7684\u5927\u5c0f\u5c31\u8d8a\u5927\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u56fe\u7247\u8fdb\u884c\u989c\u8272\u91cf\u5316\uff0c\u51cf\u5c11\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u5c06\u56fe\u50cf\u6240\u9700\u7684\u989c\u8272\u6570\u91cf\u4ece96615\u51cf\u5c11\u523064\uff0c\u540c\u65f6\u4fdd\u6301\u6574\u4f53\u5916\u89c2\u8d28\u91cf\u3002"}),"\n",(0,t.jsxs)(n.p,{children:["\u56fe\u50cf\u6765\u6e90",(0,t.jsx)(n.code,{children:'sklearn.datasets.load_sample_image("china.jpg")'})]}),"\n",(0,t.jsx)(n.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin\nfrom sklearn.datasets import load_sample_image\nfrom sklearn.utils import shuffle\nfrom time import time\n\nn_colors = 64\n\n# Load the Summer Palace photo\nchina = load_sample_image("china.jpg")\n\n# Convert to floats instead of the default 8 bits integer coding. Dividing by\n# 255 is important so that plt.imshow behaves works well on float data (need to\n# be in the range [0-1])\nchina = np.array(china, dtype=np.float64) / 255\n\n# Load Image and transform to a 2D numpy array.\nw, h, d = original_shape = tuple(china.shape)\nassert d == 3\nimage_array = np.reshape(china, (w * h, d))\n\nprint("Fitting model on a small sub-sample of the data")\nt0 = time()\nimage_array_sample = shuffle(image_array, random_state=0)[:1000]\nkmeans = KMeans(n_clusters=n_colors, random_state=0).fit(image_array_sample)\nprint("done in %0.3fs." % (time() - t0))\n\n# Get labels for all points\nprint("Predicting color indices on the full image (k-means)")\nt0 = time()\nlabels = kmeans.predict(image_array)\nprint("done in %0.3fs." % (time() - t0))\n\n\ncodebook_random = shuffle(image_array, random_state=0)[:n_colors]\nprint("Predicting color indices on the full image (random)")\nt0 = time()\nlabels_random = pairwise_distances_argmin(codebook_random,\n                                          image_array,\n                                          axis=0)\nprint("done in %0.3fs." % (time() - t0))\n\n\ndef recreate_image(codebook, labels, w, h):\n    """Recreate the (compressed) image from the code book & labels"""\n    d = codebook.shape[1]\n    image = np.zeros((w, h, d))\n    label_idx = 0\n    for i in range(w):\n        for j in range(h):\n            image[i][j] = codebook[labels[label_idx]]\n            label_idx += 1\n    return image\n\n# Display all results, alongside original image\nplt.figure(1)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Original image (96,615 colors)\')\nplt.imshow(china)\n\nplt.figure(2)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Quantized image (64 colors, K-Means)\')\nplt.imshow(recreate_image(kmeans.cluster_centers_, labels, w, h))\n\nplt.figure(3)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Quantized image (64 colors, Random)\')\nplt.imshow(recreate_image(codebook_random, labels_random, w, h))\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>s});var t=a(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);