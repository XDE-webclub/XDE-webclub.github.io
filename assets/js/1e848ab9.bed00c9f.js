"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[849],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),o=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=o(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=o(t),u=r,k=c["".concat(p,".").concat(u)]||c[u]||d[u]||l;return t?a.createElement(k,s(s({ref:n},m),{},{components:t})):a.createElement(k,s({ref:n},m))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var o=2;o<l;o++)s[o]=t[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var a=t(7462),r=(t(7294),t(3905));const l={},s=void 0,i={unversionedId:"\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)/5Scikit-Learn\u6a21\u5757",id:"\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)/5Scikit-Learn\u6a21\u5757",title:"5Scikit-Learn\u6a21\u5757",description:"Scikit-learn\uff08sklearn\uff09\u3001PyTorch\u548cTensorFlow\u662f\u4e09\u4e2a\u5728\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u5e7f\u6cdb\u4f7f\u7528\u7684\u5e93\uff0c\u5404\u81ea\u6709\u5176\u4f18\u52bf\u548c\u52a3\u52bf\u3002",source:"@site/docs/\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)/5Scikit-Learn\u6a21\u5757.md",sourceDirName:"\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)",slug:"/\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)/5Scikit-Learn\u6a21\u5757",permalink:"/course/docs/\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)/5Scikit-Learn\u6a21\u5757",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4SciPy\u6a21\u5757",permalink:"/course/docs/\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)/4SciPy\u6a21\u5757"},next:{title:"6re\u6a21\u5757",permalink:"/course/docs/\u7b2c3\u90e8\u5206\u6570\u636e\u79d1\u5b66\u5165\u95e8(\u6574\u7406\u4e2d)/6re\u6a21\u5757"}},p={},o=[{value:"\u6570\u636e\u7684\u6765\u6e90\uff1f",id:"\u6570\u636e\u7684\u6765\u6e90",level:4},{value:"\u5c0f\u578b\u6807\u51c6\u6570\u636e\u96c6",id:"\u5c0f\u578b\u6807\u51c6\u6570\u636e\u96c6",level:5},{value:"\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u6570\u636e\u96c6",id:"\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u6570\u636e\u96c6",level:5},{value:"\u6837\u672c\u751f\u6210\u5668",id:"\u6837\u672c\u751f\u6210\u5668",level:5},{value:"\u81ea\u6709\u6570\u636e\u96c6",id:"\u81ea\u6709\u6570\u636e\u96c6",level:5},{value:"\u5206\u7c7b",id:"\u5206\u7c7b",level:2},{value:"\u6a21\u578b\u8bad\u7ec3\u548c\u9884\u6d4b",id:"\u6a21\u578b\u8bad\u7ec3\u548c\u9884\u6d4b",level:2},{value:"SVM",id:"svm",level:3},{value:"\u968f\u673a\u6620\u5c04 random projection",id:"\u968f\u673a\u6620\u5c04-random-projection",level:3},{value:"LR",id:"lr",level:3},{value:"set_params",id:"set_params",level:3},{value:"\u591a\u5206\u7c7b vs. \u591a\u6807\u7b7e\u6a21\u578b",id:"\u591a\u5206\u7c7b-vs-\u591a\u6807\u7b7e\u6a21\u578b",level:2},{value:"\u9884\u6d4b\u9519\u8bef\u7ed3\u679c\u53ef\u89c6\u5316",id:"\u9884\u6d4b\u9519\u8bef\u7ed3\u679c\u53ef\u89c6\u5316",level:2},{value:"KMeans",id:"kmeans",level:2},{value:"MiniBatchKMeans",id:"minibatchkmeans",level:2},{value:"\u57fa\u4e8e\u7ecf\u9a8c\u7684k-means\u521d\u59cb\u5316\u65b9\u6cd5",id:"\u57fa\u4e8e\u7ecf\u9a8c\u7684k-means\u521d\u59cb\u5316\u65b9\u6cd5",level:2},{value:"\u624b\u5199\u4f53\u6570\u5b57\u7684k\u5747\u503c\u805a\u7c7b\u6f14\u793a",id:"\u624b\u5199\u4f53\u6570\u5b57\u7684k\u5747\u503c\u805a\u7c7b\u6f14\u793a",level:2},{value:"\u57fa\u4e8eK\u5747\u503c\u7684\u989c\u8272\u91cf\u5316",id:"\u57fa\u4e8ek\u5747\u503c\u7684\u989c\u8272\u91cf\u5316",level:2}],m={toc:o},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Scikit-learn\uff08sklearn\uff09\u3001PyTorch\u548cTensorFlow\u662f\u4e09\u4e2a\u5728\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u5e7f\u6cdb\u4f7f\u7528\u7684\u5e93\uff0c\u5404\u81ea\u6709\u5176\u4f18\u52bf\u548c\u52a3\u52bf\u3002"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u5904\u7406\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u95ee\u9898\uff0cScikit-learn\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5982\u679c\u4f60\u4e3b\u8981\u8fdb\u884c\u6df1\u5ea6\u5b66\u4e60\u7814\u7a76\u6216\u9700\u8981\u5904\u7406\u590d\u6742\u7684\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\uff0cPyTorch\u548cTensorFlow\u662f\u66f4\u597d\u7684\u9009\u62e9\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u504f\u597d\u548c\u9700\u6c42\u3002\u53e6\u5916\uff0cTensorFlow\u5728\u5de5\u4e1a\u754c\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u56e0\u6b64\u5728\u5de5\u4e1a\u90e8\u7f72\u65b9\u9762\u4e5f\u6709\u4e00\u5b9a\u4f18\u52bf\u3002"),(0,r.kt)("h4",{id:"\u6570\u636e\u7684\u6765\u6e90"},"\u6570\u636e\u7684\u6765\u6e90\uff1f"),(0,r.kt)("h5",{id:"\u5c0f\u578b\u6807\u51c6\u6570\u636e\u96c6"},"\u5c0f\u578b\u6807\u51c6\u6570\u636e\u96c6"),(0,r.kt)("p",null,"scikit-learn \u5185\u7f6e\u6709\u4e00\u4e9b\u5c0f\u578b\u6807\u51c6\u6570\u636e\u96c6\uff0c\u4e0d\u9700\u8981\u4ece\u67d0\u4e2a\u5916\u90e8\u7f51\u7ad9\u4e0b\u8f7d\u4efb\u4f55\u6587\u4ef6\u3002\n\u8fd9\u4e9b\u6570\u636e\u96c6\u6709\u52a9\u4e8e\u5feb\u901f\u8bf4\u660e\u5728 scikit \u4e2d\u5b9e\u73b0\u7684\u5404\u79cd\u7b97\u6cd5\u7684\u884c\u4e3a\u3002\n\u7136\u800c\uff0c\u5b83\u4eec\u6570\u636e\u89c4\u6a21\u5f80\u5f80\u592a\u5c0f\uff0c\u65e0\u6cd5\u4ee3\u8868\u771f\u5b9e\u4e16\u754c\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002\n\u4f46\u662f\u4f5c\u4e3a\u5b66\u4e60\u4f7f\u7528\u521a\u521a\u597d\u3002"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u6570\u636e\u96c6\u540d\u79f0"),(0,r.kt)("th",{parentName:"tr",align:null},"\u52a0\u8f7d\u65b9\u6cd5"),(0,r.kt)("th",{parentName:"tr",align:null},"\u6a21\u578b\u7c7b\u578b"),(0,r.kt)("th",{parentName:"tr",align:null},"\u6570\u636e\u5927\u5c0f(\u6837\u672c\u6570*\u7279\u5f81\u6570)"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6ce2\u58eb\u987f\u623f\u4ef7\u6570\u636e\u96c6"),(0,r.kt)("td",{parentName:"tr",align:null},"load_boston"),(0,r.kt)("td",{parentName:"tr",align:null},"regression"),(0,r.kt)("td",{parentName:"tr",align:null},"506*13")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"\u9e22\u5c3e\u82b1\u6570\u636e\u96c6"),(0,r.kt)("td",{parentName:"tr",align:null},"load_iris"),(0,r.kt)("td",{parentName:"tr",align:null},"classification"),(0,r.kt)("td",{parentName:"tr",align:null},"150*4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"\u624b\u5199\u6570\u5b57\u6570\u636e\u96c6"),(0,r.kt)("td",{parentName:"tr",align:null},"load_digits"),(0,r.kt)("td",{parentName:"tr",align:null},"classification"),(0,r.kt)("td",{parentName:"tr",align:null},"1797*64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6"),(0,r.kt)("td",{parentName:"tr",align:null},"load_diabetes"),(0,r.kt)("td",{parentName:"tr",align:null},"regression"),(0,r.kt)("td",{parentName:"tr",align:null},"442*10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8461\u8404\u9152\u6570\u636e\u96c6"),(0,r.kt)("td",{parentName:"tr",align:null},"load_wine"),(0,r.kt)("td",{parentName:"tr",align:null},"classification"),(0,r.kt)("td",{parentName:"tr",align:null},"178*13")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4e73\u817a\u764c\u6570\u636e\u96c6"),(0,r.kt)("td",{parentName:"tr",align:null},"load_breast_cancer"),(0,r.kt)("td",{parentName:"tr",align:null},"classification"),(0,r.kt)("td",{parentName:"tr",align:null},"569*30")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4f53\u80fd\u8bad\u7ec3\u6570\u636e\u96c6"),(0,r.kt)("td",{parentName:"tr",align:null},"load_linnerud"),(0,r.kt)("td",{parentName:"tr",align:null},"\u591a\u91cd\u56de\u5f52"),(0,r.kt)("td",{parentName:"tr",align:null},"20*3")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import sklearn.datasets\n\ndata = sklearn.datasets.load_wine()\ndata.data\n")),(0,r.kt)("h5",{id:"\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u6570\u636e\u96c6"},"\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u6570\u636e\u96c6"),(0,r.kt)("p",null,"scikit-learn \u63d0\u4f9b\u52a0\u8f7d\u8f83\u5927\u6570\u636e\u96c6\u7684\u5de5\u5177\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u4e0b\u8f7d\u8fd9\u4e9b\u6570\u636e\u96c6\u3002"),(0,r.kt)("p",null,"\u6570\u636e\u7279\u5f81\u8bf4\u660e\u53ef\u53c2\u8003\n",(0,r.kt)("a",{parentName:"p",href:"https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets"},"https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.datasets import fetch_california_housing\n# \u52a0\u8f7d\u6570\u636e\nhousing = fetch_california_housing()\nhousing.data\n")),(0,r.kt)("h5",{id:"\u6837\u672c\u751f\u6210\u5668"},"\u6837\u672c\u751f\u6210\u5668"),(0,r.kt)("p",null,"scikit-learn \u5305\u62ec\u5404\u79cd\u968f\u673a\u6837\u672c\u7684\u751f\u6210\u5668\uff0c\u53ef\u4ee5\u7528\u6765\u5efa\u7acb\u53ef\u63a7\u5236\u7684\u5927\u5c0f\u548c\u590d\u6742\u6027\u4eba\u5de5\u6570\u636e\u96c6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.datasets import make_blobs\n# \u521b\u5efaKNN\u6a21\u578b\u6570\u636e\u96c6\n'''\nX\u4e3a\u6837\u672c\u7279\u5f81\uff0cY\u4e3a\u6837\u672c\u7c07\u7c7b\u522b\uff0c\u51711000\u4e2a\u6837\u672c\uff0c\n\n\u6bcf\u4e2a\u6837\u672c4\u4e2a\u7279\u5f81\uff0c\u51714\u4e2a\u7c07\uff0c\u7c07\u4e2d\u5fc3\u5728[-1,-1], [0,0], [1,1], [2,2],\n\u7c07\u65b9\u5dee\u5206\u522b\u4e3a[0.4, 0.2, 0.2]\n'''\nx, y = make_blobs(n_samples=1000, \n                  n_features=2,\n                  centers=[[-1, -1], [0, 0], [1, 1], [2, 2]],\n                  cluster_std=[0.4, 0.2, 0.2, 0.2],\n                  )\nfrom sklearn.datasets import make_regression\n# \u521b\u5efa\u56de\u5f52\u6a21\u578b\u6570\u636e\u96c6\n'''\nX\u4e3a\u6837\u672c\u7279\u5f81\uff0cY\u4e3a\u6837\u672c\u7c07\u7c7b\u522b\uff0c\u51711000\u4e2a\u6837\u672c\uff0c\n\n\u6bcf\u4e2a\u6837\u672c1\u4e2a\u7279\u5f81\uff0c\n\u79bb\u6563\u5ea6\u4e3a2\n'''\nx2,y2 = make_regression(n_samples=1000, n_features=1, n_targets=1, noise=2)\n")),(0,r.kt)("h5",{id:"\u81ea\u6709\u6570\u636e\u96c6"},"\u81ea\u6709\u6570\u636e\u96c6"),(0,r.kt)("p",null,"\u6211\u4eec\u624b\u4e0a\u53ef\u80fd\u521a\u597d\u6709\u4e00\u4e9b\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u901a\u8fc7pandas\u6216\u8005numpy\u8bfb\u53d6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# \u901a\u8fc7pandas\u6216\u8005numpy\u8bfb\u53d6\nimport pandas as pd\nimport numpy as np\ndata = pd.read_csv('./data/iris.csv')\n# \u901a\u8fc7numpy\u8bfb\u53d6\ndata = np.loadtxt('./data/iris.csv', delimiter=\",\", skiprows=1)\n\n")),(0,r.kt)("h2",{id:"\u5206\u7c7b"},"\u5206\u7c7b"),(0,r.kt)("p",null,"\u5148\u5b66\u4e60\u4e0b\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u5206\u7c7b\u4efb\u52a1\uff1a"),(0,r.kt)("p",null,"\u52a0\u8f7d\u6570\u636e\u96c6\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import datasets\ndigits = datasets.load_digits()\n\ndigits.keys()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"digits.data\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(digits.target)\ndigits.images[0]\n")),(0,r.kt)("p",null,"\u663e\u793a\u56fe\u7247\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import datasets\nfrom matplotlib import pyplot as plt\ndigits = datasets.load_digits()\nfig, ax = plt.subplots(\n    nrows=4,\n    ncols=4,\n    sharex=True,\n    sharey=True)\n \nax = ax.flatten()\nfor i in range(16):\n    ax[i].imshow(digits.data[i].reshape((8, 8)), cmap='Greys', interpolation='nearest')\nplt.show()\n")),(0,r.kt)("h2",{id:"\u6a21\u578b\u8bad\u7ec3\u548c\u9884\u6d4b"},"\u6a21\u578b\u8bad\u7ec3\u548c\u9884\u6d4b"),(0,r.kt)("h3",{id:"svm"},"SVM"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import svm\nclf = svm.SVC(gamma = 0.001, C=100)\n\nclf.fit(digits.data[:-1], digits.target[:-1])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"clf.predict(digits.data[:2])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import svm\nfrom sklearn import datasets\nclf = svm.SVC()\niris = datasets.load_iris()\nX, y = iris.data, iris.target\nclf.fit(X, y)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"clf.predict(X[:150])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y[:150]\n")),(0,r.kt)("p",null,"\u4f7f\u7528pickle\u5e8f\u5217\u5316\u6a21\u578b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pickle\ns = pickle.dumps(clf)\nclf2 = pickle.loads(s)\npredict_y = clf2.predict(X[:150])\npredict_y\n")),(0,r.kt)("p",null,"\u4f7f\u7528joblib\u4fdd\u5b58\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import joblib\njoblib.dump(clf, 'clf.pkl')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"clf = joblib.load('clf.pkl')\nclf\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\nos.remove('clf.pkl')\n")),(0,r.kt)("h3",{id:"\u968f\u673a\u6620\u5c04-random-projection"},"\u968f\u673a\u6620\u5c04 random projection"),(0,r.kt)("p",null,"sklearn.random_projection \u6a21\u5757\u5b9e\u73b0\u4e86\u4e00\u79cd\u7b80\u5355\u548c\u8ba1\u7b97\u9ad8\u6548\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u4ea4\u6613\u63a7\u5236\u91cf\u7684\u7cbe\u5ea6\uff08\u4f5c\u4e3a\u9644\u52a0\u65b9\u5dee\uff09\uff0c\u4ee5\u7f29\u77ed\u6570\u636e\u7684\u7ef4\u6570\uff0c\u4ece\u800c\u7f29\u77ed\u5904\u7406\u65f6\u95f4\u548c\u7f29\u5c0f\u6a21\u578b\u5927\u5c0f\u3002"),(0,r.kt)("p",null,"\u8be5\u6a21\u5757\u5b9e\u73b0\u4e24\u79cd\u7c7b\u578b\u7684\u975e\u7ed3\u6784\u5316\u968f\u673a\u77e9\u9635\uff1a\u9ad8\u65af\u968f\u673a\u77e9\u9635 GaussianRandomProjection \u548c\u7a00\u758f\u968f\u673a\u77e9\u9635 SparseRandomProjection\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u9ad8\u65af\u968f\u673a\u77e9\u9635\uff1a\u901a\u8fc7\u5c06\u539f\u59cb\u8f93\u5165\u7a7a\u95f4\u6295\u5f71\u5728\u968f\u673a\u751f\u6210\u7684\u77e9\u9635\u4e0a\u6765\u964d\u4f4e\u7ef4\u5ea6\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u7a00\u758f\u968f\u673a\u77e9\u9635\uff1a\u76f8\u6bd4\u4e8e\u9ad8\u65af\u968f\u673a\u6620\u5c04\uff0c\u7a00\u758f\u968f\u673a\u6620\u5c04\u4f1a\u66f4\u80fd\u4fdd\u8bc1\u964d\u7ef4\u7684\u8d28\u91cf\uff0c\u5e76\u5e26\u6765\u5185\u5b58\u7684\u4f7f\u7528\u6548\u7387\u548c\u8fd0\u7b97\u6548\u7387\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nfrom sklearn import random_projection\nrng = np.random.RandomState(0)\nX = rng.rand(10, 2000)\nX = np.array(X, dtype='float32')\nX\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"transformer = random_projection.GaussianRandomProjection()\nX_new = transformer.fit_transform(X)\n\nprint(X_new.dtype)\n")),(0,r.kt)("h3",{id:"lr"},"LR"),(0,r.kt)("p",null,"\u4f7f\u7528\u903b\u8f91\u56de\u5f52\uff08Logistic Regression, LR\uff09\u6a21\u578b\uff1a"),(0,r.kt)("p",null,"LR\u6a21\u578b\u7684\u8be6\u7ec6\u4ecb\u7ecd\u53c2\u8003sklearn\u5b98\u65b9\u6587\u6863\uff1a",(0,r.kt)("a",{parentName:"p",href:"http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression"},"LR")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\n\niris = datasets.load_iris()\nclf = LogisticRegression(solver='lbfgs', fit_intercept=False)\nclf.fit(iris.data, iris.target)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list(clf.predict(iris.data[:3]))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y[:3]\n")),(0,r.kt)("p",null,"\u5982\u679c\u6a21\u578b\u7684label\u4e3a\u6587\u672c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"clf.fit(iris.data, iris.target_names[iris.target])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list(clf.predict(iris.data[:3]))\n")),(0,r.kt)("h3",{id:"set_params"},"set_params"),(0,r.kt)("p",null,"\u8bbe\u7f6e\u6a21\u578b\u53c2\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nfrom sklearn.svm import SVC\n\nrng = np.random.RandomState(0)\nX = rng.rand(100, 10)\ny = rng.binomial(1, 0.5, 100)\nX_test = rng.rand(5, 10)\n\nclf = SVC()\nclf.set_params(kernel='linear').fit(X, y)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"clf.predict(X_test)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"clf.set_params(kernel='rbf').fit(X, y)\nclf.predict(X_test)\n")),(0,r.kt)("h2",{id:"\u591a\u5206\u7c7b-vs-\u591a\u6807\u7b7e\u6a21\u578b"},"\u591a\u5206\u7c7b vs. \u591a\u6807\u7b7e\u6a21\u578b"),(0,r.kt)("p",null,"\u591a\u5206\u7c7b\u6a21\u578b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.svm import SVC\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.preprocessing import LabelBinarizer\n\nX = [[1, 2], [2, 4], [4, 5], [3, 2], [3, 1]]\ny = [0, 0, 1, 1, 2]\nclassify = OneVsRestClassifier(estimator=SVC(random_state=0))\nmodel = classify.fit(X, y)\nmodel\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"model.predict(X)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y = LabelBinarizer().fit_transform(y)\ny\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"classify.fit(X, y).predict(X) \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"classify.fit(X, y).score(X, y)\n# 0.6 \n")),(0,r.kt)("p",null,"\u591a\u6807\u7b7e\u6a21\u578b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.preprocessing import MultiLabelBinarizer\ny = [[0, 1], [0, 2], [1, 3], [0, 2, 3], [2, 4]]\ny\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y = MultiLabelBinarizer().fit_transform(y)\ny\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"classify = OneVsRestClassifier(estimator=SVC(random_state=0))\nmodel = classify.fit(X, y)\nmodel\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"model.predict(X)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"model.score(X, y)\n")),(0,r.kt)("h2",{id:"\u9884\u6d4b\u9519\u8bef\u7ed3\u679c\u53ef\u89c6\u5316"},"\u9884\u6d4b\u9519\u8bef\u7ed3\u679c\u53ef\u89c6\u5316"),(0,r.kt)("p",null," ",(0,r.kt)("inlineCode",{parentName:"p"},"cross_val_predict")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import datasets\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n\nlr = LinearRegression()\nboston = datasets.load_diabetes()\ny = boston.target\n\nboston.data[:3]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predicted = cross_val_predict(lr, boston.data, y, cv=10)\npredicted[:3]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"fig, ax = plt.subplots()\nax.scatter(y, predicted)\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()\n")),(0,r.kt)("p",null,"| ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/shibing624/python-tutorial/blob/master/03_data_science/10_Scikit-Learn%E8%81%9A%E7%B1%BB.ipynb"},"03_data_science/10_Scikit-Learn\u805a\u7c7b.ipynb"),"  | Scikit-Learn\u805a\u7c7b  |",(0,r.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/shibing624/python-tutorial/blob/master/03_data_science/10_Scikit-Learn%E8%81%9A%E7%B1%BB.ipynb"},"Open In Colab")," |"),(0,r.kt)("h1",{id:"\u805a\u7c7bcluster"},"\u805a\u7c7b\uff1aCluster"),(0,r.kt)("p",null,"\u6d4b\u8bd5\u6570\u636e\u6f14\u793a\u805a\u7c7b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.cluster import KMeans\nimport numpy as np\n\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\nkmeans = KMeans(n_clusters=2, random_state=10).fit(X)\nkmeans.labels_    # array([0, 0, 0, 1, 1, 1], dtype=int32)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"kmeans.predict([[0, 0], [5, 4]])   # array([0, 1], dtype=int32)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"kmeans.cluster_centers_   # array([[1., 2.], [4., 2.]])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\n\nX, y = make_blobs(n_samples=1000, \n                  n_features=2,\n                  centers=[[-1, -1], [0, 0], [1, 1], [2, 2]],\n                  cluster_std=[0.4, 0.2, 0.2, 0.2],\n                  random_state=5)\nX[999]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y.shape\n")),(0,r.kt)("p",null,"X\u4e3a\u6837\u672c\u7279\u5f81\uff0cY\u4e3a\u6837\u672c\u7c07\u7c7b\u522b\uff0c\u51711000\u4e2a\u6837\u672c\uff0c"),(0,r.kt)("p",null,"\u6bcf\u4e2a\u6837\u672c4\u4e2a\u7279\u5f81\uff0c\u51714\u4e2a\u7c07\uff0c\u7c07\u4e2d\u5fc3\u5728","[-1,-1]",", ","[0,0]",", ","[1,1]",", ","[2,2]",",\n\u7c07\u65b9\u5dee\u5206\u522b\u4e3a","[0.4, 0.2, 0.2]"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"plt.scatter(X[:, 0], X[:, 1], marker='o')\nplt.show()\n")),(0,r.kt)("h2",{id:"kmeans"},"KMeans"),(0,r.kt)("p",null,"\u4f7f\u7528KMeans\u805a\u7c7b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.cluster import KMeans\ny_pred = KMeans(n_clusters=2, random_state=9).fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.show()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import metrics\nmetrics.calinski_harabasz_score(X, y_pred)\n")),(0,r.kt)("p",null,"\u8bbe\u7f6e4\u4e2a\u7c07\uff0cn_clusters=4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y_pred = KMeans(n_clusters=4, random_state=9).fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.show()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"metrics.calinski_harabasz_score(X, y_pred)\n")),(0,r.kt)("h2",{id:"minibatchkmeans"},"MiniBatchKMeans"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.cluster import MiniBatchKMeans\ny_pred = MiniBatchKMeans(n_clusters=2, batch_size=200, random_state=9).fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.show()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"metrics.calinski_harabasz_score(X, y_pred)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y_pred = MiniBatchKMeans(n_clusters=3, batch_size=200, random_state=9).fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.show()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"metrics.calinski_harabasz_score(X, y_pred)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"y_pred = MiniBatchKMeans(n_clusters=4, batch_size=200, random_state=9).fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.show()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"metrics.calinski_harabasz_score(X, y_pred)\n")),(0,r.kt)("p",null,"n_clusters\u7684\u9009\u62e9\uff1f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"plt.subplots_adjust(left=.02, right=.98, bottom=.096, top=.96, wspace=.1, hspace=.1)\n\nplt.subplot(2, 2, 1)\ny_pred = MiniBatchKMeans(n_clusters=2, batch_size=200, random_state=9).fit_predict(X)\nscore2 = metrics.calinski_harabasz_score(X, y_pred)  \nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.text(.99, .01, ('k=%d, score: %.2f' % (2, score2)),\n                 transform=plt.gca().transAxes, size=10,\n                 horizontalalignment='right')\n\n\nplt.subplot(2, 2, 2)\ny_pred = MiniBatchKMeans(n_clusters=3, batch_size = 200, random_state=9).fit_predict(X)\nscore3 = metrics.calinski_harabasz_score(X, y_pred)  \nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.text(.99, .01, ('k=%d, score: %.2f' % (3, score3)),\n                 transform=plt.gca().transAxes, size=10,\n                 horizontalalignment='right')\n\nplt.subplot(2, 2, 3)\ny_pred = MiniBatchKMeans(n_clusters=4, batch_size = 200, random_state=9).fit_predict(X)\nscore4 = metrics.calinski_harabasz_score(X, y_pred)  \nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.text(.99, .01, ('k=%d, score: %.2f' % (4, score4)),\n                 transform=plt.gca().transAxes, size=10,\n                 horizontalalignment='right')\n\nplt.subplot(2, 2, 4)\ny_pred = MiniBatchKMeans(n_clusters=5, batch_size = 200, random_state=9).fit_predict(X)\nscore5 = metrics.calinski_harabasz_score(X, y_pred)  \nplt.scatter(X[:, 0], X[:, 1], c=y_pred)\nplt.text(.99, .01, ('k=%d, score: %.2f' % (5, score5)),\n                 transform=plt.gca().transAxes, size=10,\n                 horizontalalignment='right')\nplt.show()\n")),(0,r.kt)("p",null,"\u7b80\u5316\u7684\u5199\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"plt.subplots_adjust(left=.02, right=.98, bottom=.096, top=.96, wspace=.1, hspace=.1)\nfor index, k in enumerate((2, 3, 4, 5)):\n    plt.subplot(2, 2, index + 1)\n    y_pred = MiniBatchKMeans(n_clusters=k, batch_size=200, random_state=9).fit_predict(X)\n    score = metrics.calinski_harabasz_score(X, y_pred)  \n    plt.scatter(X[:, 0], X[:, 1], c=y_pred)\n    plt.text(.99, .01, ('k=%d, score: %.2f' % (k, score)),\n                 transform=plt.gca().transAxes, size=10,\n                 horizontalalignment='right')\nplt.show()\n")),(0,r.kt)("h2",{id:"\u57fa\u4e8e\u7ecf\u9a8c\u7684k-means\u521d\u59cb\u5316\u65b9\u6cd5"},"\u57fa\u4e8e\u7ecf\u9a8c\u7684k-means\u521d\u59cb\u5316\u65b9\u6cd5"),(0,r.kt)("p",null,"\u8bc4\u4f30k\u5747\u503c\u521d\u59cb\u5316\u7684\u65b9\u6cd5\uff0c\u4ee5\u4f7f\u7b97\u6cd5\u5feb\u901f\u6536\u655b\uff0c\u5373\u5230\u6700\u8fd1\u805a\u7c7b\u4e2d\u5fc3\u7684\u5e73\u65b9\u8ddd\u79bb\u4e4b\u548c\u6d4b\u91cf\u7684\u3002"),(0,r.kt)("p",null,"\u6bd4\u8f83K-Means\u548cMiniBatchKMeans\u7b97\u6cd5\u7684\u805a\u7c7b\u6548\u679c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\nfrom sklearn.utils import shuffle\nfrom sklearn.utils import check_random_state\nfrom sklearn.cluster import MiniBatchKMeans\nfrom sklearn.cluster import KMeans\n\nrandom_state = np.random.RandomState(0)\n\n# \u6bcf\u4e2a\u7b56\u7565\u7684\u8fd0\u884c\u6b21\u6570\uff08\u4f7f\u7528\u968f\u673a\u751f\u6210\u7684\u6570\u636e\u96c6\uff09\uff0c\u4ee5\u4fbf\u80fd\u591f\u8ba1\u7b97\u6807\u51c6\u504f\u5dee\u7684\u4f30\u8ba1\u503c\nn_runs = 5\n\n# k-means\u6a21\u578b\u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u968f\u673a\u521d\u59cb\u5316\uff0c\u4ee5\u4fbf\u80fd\u591f\u5feb\u901f\u6536\u655b\nn_init_range = np.array([1, 5, 10, 15, 20])\n\n# \u6570\u636e\u751f\u6210\u53c2\u6570\nn_samples_per_center = 100\ngrid_size = 3\nscale = 0.1\nn_clusters = grid_size ** 2\n\n\ndef make_data(random_state, n_samples_per_center, grid_size, scale):\n    random_state = check_random_state(random_state)\n    centers = np.array([[i, j]\n                        for i in range(grid_size)\n                        for j in range(grid_size)])\n    n_clusters_true, n_features = centers.shape\n\n    noise = random_state.normal(\n        scale=scale, size=(n_samples_per_center, centers.shape[1]))\n\n    X = np.concatenate([c + noise for c in centers])\n    y = np.concatenate([[i] * n_samples_per_center\n                        for i in range(n_clusters_true)])\n    return shuffle(X, y, random_state=random_state)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Part 1: \u521d\u59cb\u5316\u65b9\u6cd5\u7684\u5b9a\u91cf\u8bc4\u4ef7\n\nplt.figure()\nplots = []\nlegends = []\n\ncases = [\n    (KMeans, 'k-means++', {}),\n    (KMeans, 'random', {}),\n    (MiniBatchKMeans, 'k-means++', {'max_no_improvement': 3}),\n    (MiniBatchKMeans, 'random', {'max_no_improvement': 3, 'init_size': 500}),\n]\n\nfor factory, init, params in cases:\n    print(\"Evaluation of %s with %s init\" % (factory.__name__, init))\n    inertia = np.empty((len(n_init_range), n_runs))\n\n    for run_id in range(n_runs):\n        X, y = make_data(run_id, n_samples_per_center, grid_size, scale)\n        for i, n_init in enumerate(n_init_range):\n            km = factory(n_clusters=n_clusters, init=init, random_state=run_id,\n                         n_init=n_init, **params).fit(X)\n            inertia[i, run_id] = km.inertia_\n    p = plt.errorbar(n_init_range, inertia.mean(axis=1), inertia.std(axis=1))\n    plots.append(p[0])\n    legends.append(\"%s with %s init\" % (factory.__name__, init))\n\nplt.xlabel('n_init')\nplt.ylabel('inertia')\nplt.legend(plots, legends)\nplt.title(\"Mean inertia for various k-means init across %d runs\" % n_runs)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Part 2: \u6570\u636e\u805a\u7c7b\u7ed3\u679c\u7684\u53ef\u89c6\u5316\u663e\u793a\n\nX, y = make_data(random_state, n_samples_per_center, grid_size, scale)\nkm = MiniBatchKMeans(n_clusters=n_clusters, init='random', n_init=1,\n                     random_state=random_state).fit(X)\n\nplt.figure()\nfor k in range(n_clusters):\n    my_members = km.labels_ == k\n    color = cm.nipy_spectral(float(k) / n_clusters, 1)\n    plt.plot(X[my_members, 0], X[my_members, 1], 'o', marker='.', c=color)\n    cluster_center = km.cluster_centers_[k]\n    plt.plot(cluster_center[0], cluster_center[1], 'o',\n             markerfacecolor=color, markeredgecolor='k', markersize=6)\n    plt.title(\"Example cluster allocation with a single random init\\n\"\n              \"with MiniBatchKMeans\")\n\nplt.show()\n\n")),(0,r.kt)("p",null,"\u7b2c\u4e00\u4e2a\u56fe\u663e\u793a\u4e86\u6700\u4f73\u521d\u59cb\u5316\u53c2\u6570\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"KMeans")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"MiniBatchKMeans"),"\uff09\u548cinit\u65b9\u6cd5\uff08",(0,r.kt)("inlineCode",{parentName:"p"},'init="random"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'init="kmeans++"'),"\uff09\u7684\u9009\u62e9\u3002"),(0,r.kt)("p",null,"\u7b2c\u4e8c\u4e2a\u56fe\u663e\u793a\u4e86\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},'init="random"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},"n_init=1"),"\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"MiniBatchKMeans"),"\u4e00\u6b21\u8fd0\u884c\u7ed3\u679c\u3002\u8fd9\u79cd\u8fd0\u884c\u5bfc\u81f4\u4e00\u4e2a\u574f\u7684\u6536\u655b\uff08\u5c40\u90e8\u6700\u4f18\uff09\u3002"),(0,r.kt)("p",null,"\u7ed3\u8bba\uff1a\u521d\u59cb\u5316\u4e00\u81f4\u7684\u60c5\u51b5\u4e0b\uff0cK-Means\u548cMiniBatchKMeans\u7b97\u6cd5\u5dee\u522b\u5f88\u5c0f\u3002"),(0,r.kt)("h2",{id:"\u624b\u5199\u4f53\u6570\u5b57\u7684k\u5747\u503c\u805a\u7c7b\u6f14\u793a"},"\u624b\u5199\u4f53\u6570\u5b57\u7684k\u5747\u503c\u805a\u7c7b\u6f14\u793a"),(0,r.kt)("p",null,"\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6bd4\u8f83k-means\u7684\u5404\u79cd\u521d\u59cb\u5316\u7b56\u7565\u7684\u8fd0\u884c\u7684\u6548\u679c\u3002"),(0,r.kt)("p",null,"\u8bc4\u4f30\u805a\u7c7b\u6548\u679c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from time import time\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_digits\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\n\nnp.random.seed(42)\n\ndigits = load_digits()\ndata = scale(digits.data)\n\nn_samples, n_features = data.shape\nn_digits = len(np.unique(digits.target))\nlabels = digits.target\n\nsample_size = 300\n\nprint(\"n_digits: %d, \\t n_samples %d, \\t n_features %d\"\n      % (n_digits, n_samples, n_features))\n\n\nprint(82 * '_')\nprint('init\\t\\ttime\\tinertia\\thomo\\tcompl\\tv-meas\\tARI\\tAMI\\tsilhouette')\n\n\ndef bench_k_means(estimator, name, data):\n    t0 = time()\n    estimator.fit(data)\n    print('%-9s\\t%.2fs\\t%i\\t%.3f\\t%.3f\\t%.3f\\t%.3f\\t%.3f\\t%.3f'\n          % (name, (time() - t0), estimator.inertia_,\n             metrics.homogeneity_score(labels, estimator.labels_),\n             metrics.completeness_score(labels, estimator.labels_),\n             metrics.v_measure_score(labels, estimator.labels_),\n             metrics.adjusted_rand_score(labels, estimator.labels_),\n             metrics.adjusted_mutual_info_score(labels,  estimator.labels_),\n             metrics.silhouette_score(data, estimator.labels_,\n                                      metric='euclidean',\n                                      sample_size=sample_size)))\n\nbench_k_means(KMeans(init='k-means++', n_clusters=n_digits, n_init=10),\n              name=\"k-means++\", data=data)\n\nbench_k_means(KMeans(init='random', n_clusters=n_digits, n_init=10),\n              name=\"random\", data=data)\n\n# in this case the seeding of the centers is deterministic, hence we run the\n# kmeans algorithm only once with n_init=1\npca = PCA(n_components=n_digits).fit(data)\nbench_k_means(KMeans(init=pca.components_, n_clusters=n_digits, n_init=1),\n              name=\"PCA-based\",\n              data=data)\nprint(82 * '_')\n\n# #############################################################################\n# Visualize the results on PCA-reduced data\n\nreduced_data = PCA(n_components=2).fit_transform(data)\nkmeans = KMeans(init='k-means++', n_clusters=n_digits, n_init=10)\nkmeans.fit(reduced_data)\n\n# Step size of the mesh. Decrease to increase the quality of the VQ.\nh = .02     # point in the mesh [x_min, x_max]x[y_min, y_max].\n\n# Plot the decision boundary. For that, we will assign a color to each\nx_min, x_max = reduced_data[:, 0].min() - 1, reduced_data[:, 0].max() + 1\ny_min, y_max = reduced_data[:, 1].min() - 1, reduced_data[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n\n# Obtain labels for each point in mesh. Use last trained model.\nZ = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\nplt.figure(1)\nplt.clf()\nplt.imshow(Z, interpolation='nearest',\n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap=plt.cm.Paired,\n           aspect='auto', origin='lower')\n\nplt.plot(reduced_data[:, 0], reduced_data[:, 1], 'k.', markersize=2)\n# Plot the centroids as a white X\ncentroids = kmeans.cluster_centers_\nplt.scatter(centroids[:, 0], centroids[:, 1],\n            marker='x', s=169, linewidths=3,\n            color='w', zorder=10)\nplt.title('K-means clustering on the digits dataset (PCA-reduced data)\\n'\n          'Centroids are marked with white cross')\nplt.xlim(x_min, x_max)\nplt.ylim(y_min, y_max)\nplt.xticks(())\nplt.yticks(())\nplt.show()\n\n")),(0,r.kt)("h2",{id:"\u57fa\u4e8ek\u5747\u503c\u7684\u989c\u8272\u91cf\u5316"},"\u57fa\u4e8eK\u5747\u503c\u7684\u989c\u8272\u91cf\u5316"),(0,r.kt)("p",null,"\u5bf9\u9890\u548c\u56ed\u56fe\u50cf\u6267\u884c\u50cf\u7d20\u77e2\u91cf\u91cf\u5316\uff08VQ\uff09\uff0c\u5c06\u663e\u793a\u56fe\u50cf\u6240\u9700\u7684\u989c\u8272\u6570\u91cf\u4ece96615\u51cf\u5c11\u523064\uff0c\u540c\u65f6\u4fdd\u6301\u6574\u4f53\u5916\u89c2\u8d28\u91cf\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin\nfrom sklearn.datasets import load_sample_image\nfrom sklearn.utils import shuffle\nfrom time import time\n\nn_colors = 64\n\n# Load the Summer Palace photo\nchina = load_sample_image("china.jpg")\n\n# Convert to floats instead of the default 8 bits integer coding. Dividing by\n# 255 is important so that plt.imshow behaves works well on float data (need to\n# be in the range [0-1])\nchina = np.array(china, dtype=np.float64) / 255\n\n# Load Image and transform to a 2D numpy array.\nw, h, d = original_shape = tuple(china.shape)\nassert d == 3\nimage_array = np.reshape(china, (w * h, d))\n\nprint("Fitting model on a small sub-sample of the data")\nt0 = time()\nimage_array_sample = shuffle(image_array, random_state=0)[:1000]\nkmeans = KMeans(n_clusters=n_colors, random_state=0).fit(image_array_sample)\nprint("done in %0.3fs." % (time() - t0))\n\n# Get labels for all points\nprint("Predicting color indices on the full image (k-means)")\nt0 = time()\nlabels = kmeans.predict(image_array)\nprint("done in %0.3fs." % (time() - t0))\n\n\ncodebook_random = shuffle(image_array, random_state=0)[:n_colors]\nprint("Predicting color indices on the full image (random)")\nt0 = time()\nlabels_random = pairwise_distances_argmin(codebook_random,\n                                          image_array,\n                                          axis=0)\nprint("done in %0.3fs." % (time() - t0))\n\n\ndef recreate_image(codebook, labels, w, h):\n    """Recreate the (compressed) image from the code book & labels"""\n    d = codebook.shape[1]\n    image = np.zeros((w, h, d))\n    label_idx = 0\n    for i in range(w):\n        for j in range(h):\n            image[i][j] = codebook[labels[label_idx]]\n            label_idx += 1\n    return image\n\n# Display all results, alongside original image\nplt.figure(1)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Original image (96,615 colors)\')\nplt.imshow(china)\n\nplt.figure(2)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Quantized image (64 colors, K-Means)\')\nplt.imshow(recreate_image(kmeans.cluster_centers_, labels, w, h))\n\nplt.figure(3)\nplt.clf()\nplt.axis(\'off\')\nplt.title(\'Quantized image (64 colors, Random)\')\nplt.imshow(recreate_image(codebook_random, labels_random, w, h))\n')),(0,r.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u805a\u7c7b\u540e\uff0c\u7528\u66f4\u5c11\u7684\u989c\u8272\u6570\u91cf\u8fbe\u5230\u4e86\u8ddf\u539f\u56fe\u5dee\u4e0d\u591a\u7684\u663e\u793a\u6548\u679c\uff0c\u5f3a\u4e8e\u968f\u673a\u9009\u62e9\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"")))}d.isMDXComponent=!0}}]);