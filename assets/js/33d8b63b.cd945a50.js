"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[135],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>b});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var c=r.createContext({}),p=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},s=function(n){var e=p(n.components);return r.createElement(c.Provider,{value:e},n.children)},d="mdxType",f={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,l=n.originalType,c=n.parentName,s=o(n,["components","mdxType","originalType","parentName"]),d=p(t),m=a,b=d["".concat(c,".").concat(m)]||d[m]||f[m]||l;return t?r.createElement(b,i(i({ref:e},s),{},{components:t})):r.createElement(b,i({ref:e},s))}));function b(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=n,o[d]="string"==typeof n?n:a,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4531:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const l={},i=void 0,o={unversionedId:"\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/9\u968f\u673a\u68ee\u6797-\u4e0b",id:"\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/9\u968f\u673a\u68ee\u6797-\u4e0b",title:"9\u968f\u673a\u68ee\u6797-\u4e0b",description:"\u6548\u679c\u8bc4\u4f30",source:"@site/docs/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/9\u968f\u673a\u68ee\u6797-\u4e0b.md",sourceDirName:"\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8",slug:"/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/9\u968f\u673a\u68ee\u6797-\u4e0b",permalink:"/course/docs/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/9\u968f\u673a\u68ee\u6797-\u4e0b",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"9\u968f\u673a\u68ee\u6797-\u4e0a",permalink:"/course/docs/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/9\u968f\u673a\u68ee\u6797-\u4e0a"},next:{title:"1\u795e\u7ecf\u7f51\u7f51\u7edc\u57fa\u7840-\u4e0a",permalink:"/course/docs/\u7b2c3\u90e8\u5206\u6df1\u5ea6\u5b66\u4e60\u5165\u95e8/1\u795e\u7ecf\u7f51\u7f51\u7edc\u57fa\u7840-\u4e0a"}},c={},p=[{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30",level:3},{value:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668",id:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668",level:3},{value:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406",id:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406",level:3}],s={toc:p},d="wrapper";function f(n){let{components:e,...t}=n;return(0,a.kt)(d,(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30"},"\u6548\u679c\u8bc4\u4f30"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# \u7528log_loss\u6765\u8bc4\u4f30\u6a21\u578b\nscore = log_loss(y_test, clf_probs)\nprint("  %.3f " % score)\n# \u8fd9\u4e2a\u5206\u7c7b\u5668\u5bf9\u6240\u6709800\u4e2a\u8bad\u7ec3\u6570\u636e\u70b9\u90fd\u8fdb\u884c\u4e86\u8bad\u7ec3\uff0c\u90a3\u4e48\u5b83\u5bf9\u5b83\u7684\u9884\u6d4b\u8fc7\u4e8e\u81ea\u4fe1,\u5bfc\u81f4\u4e86\u8fc7\u62df\u5408\n\n# \u63a5\u4e0b\u6765\u9700\u8981\u77eb\u6b63\u8fd9\u4e2a\u5206\u7c7b\u5668\uff0c\u8ba9\u5b83\u5bf9\u81ea\u5df1\u7684\u9884\u6d4b\u4e0d\u90a3\u4e48\u81ea\u4fe1\n\n# \u4fee\u6b63\u524d\u7684\u8bef\u5dee\u8fbe\u5230\u4e861.3 \u4fee\u6b63\u540e\u7684\u6570\u636e\u8bef\u5dee\u964d\u5230\u4e86 0.534\n')),(0,a.kt)("h3",{id:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668"},"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Train random forest classifier, calibrate on validation data and evaluate\n# on test data\n# \u4f7f\u7528\u524d60%\u7684\u6570\u636e\u8bad\u7ec3\uff0c\u4e2d20%\u7684\u6570\u636e\u6821\u51c6\uff0c\u540e20%\u7684\u6570\u636e\u6d4b\u8bd5\nclf = RandomForestClassifier(n_estimators=25)\nclf.fit(X_train, y_train)\nclf_probs = clf.predict_proba(X_test)\n# \u83b7\u53d6\u539f\u672c\u7684\u6a21\u578b\n# method="sigmoid" \u4ee3\u8868\u4f7f\u7528sigmoid\u51fd\u6570\u6765\u8fdb\u884c\u6821\u51c6\n# cv="prefit" \u4ee3\u8868\u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u6765\u8fdb\u884c\u6821\u51c6\nsig_clf = CalibratedClassifierCV(clf, method="sigmoid", cv="prefit")\n# \u5bf9\u4e2d\u95f4\u768420%\u9884\u6d4b\u540e\u8fdb\u884c\u6982\u7387\u8c03\u8bd5\uff08\u6a21\u578b\u4f18\u5316\uff09\nsig_clf.fit(X_valid, y_valid)\n# .predict_proba(X_test) \u8fdb\u884c\u9884\u6d4b(\u4f18\u5316\u540e\u7684\u6a21\u578b\u4f7f\u7528\u65b9\u6cd5\u4e0d\u53d8)\nsig_clf_probs = sig_clf.predict_proba(X_test)\n# \u7528log_loss\u6765\u8bc4\u4f30\u6a21\u578b\nsig_score = log_loss(y_test, sig_clf_probs)\n\nprint("%.3f" % sig_score)\n# \u4fee\u6b63\u524d\u7684\u8bef\u5dee\u8fbe\u5230\u4e861.3 \u4fee\u6b63\u540e\u7684\u6570\u636e\u8bef\u5dee\u964d\u5230\u4e86 0.534\n\n\n')),(0,a.kt)("h3",{id:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406"},"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Plot changes in predicted probabilities via arrows\nplt.figure()\n# \u989c\u8272\u8868\u793a\u5b9e\u4f8b\u7684\u771f\u6b63\u7c7b(\u7ea2\u8272\uff1a1\u7c7b\uff0c\u7eff\u8272\uff1a2\u7c7b\uff0c\u84dd\u8272\uff1a3\u7c7b)\ncolors = [\"r\", \"g\", \"b\"]\nfor i in range(clf_probs.shape[0]):\n    plt.arrow(clf_probs[i, 0], clf_probs[i, 1],\n              sig_clf_probs[i, 0] - clf_probs[i, 0],\n              sig_clf_probs[i, 1] - clf_probs[i, 1],\n              color=colors[y_test[i]], head_width=1e-2)\n\n# Plot perfect predictions\nplt.plot([1.0], [0.0], 'ro', ms=20, label=\"Class 1\")\nplt.plot([0.0], [1.0], 'go', ms=20, label=\"Class 2\")\nplt.plot([0.0], [0.0], 'bo', ms=20, label=\"Class 3\")\n\n# Plot boundaries of unit simplex\nplt.plot([0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], 'k', label=\"Simplex\")\n\n# Annotate points on the simplex\nplt.annotate(r'($\\frac{1}{3}$, $\\frac{1}{3}$, $\\frac{1}{3}$)',\n             xy=(1.0/3, 1.0/3), xytext=(1.0/3, .23), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.plot([1.0/3], [1.0/3], 'ko', ms=5)\nplt.annotate(r'($\\frac{1}{2}$, $0$, $\\frac{1}{2}$)',\n             xy=(.5, .0), xytext=(.5, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $\\frac{1}{2}$, $\\frac{1}{2}$)',\n             xy=(.0, .5), xytext=(.1, .5), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($\\frac{1}{2}$, $\\frac{1}{2}$, $0$)',\n             xy=(.5, .5), xytext=(.6, .6), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $0$, $1$)',\n             xy=(0, 0), xytext=(.1, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($1$, $0$, $0$)',\n             xy=(1, 0), xytext=(1, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $1$, $0$)',\n             xy=(0, 1), xytext=(.1, 1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\n# Add grid\nplt.grid(False)\nfor x in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:\n    plt.plot([0, x], [x, 0], 'k', alpha=0.2)\n    plt.plot([0, 0 + (1-x)/2], [x, x + (1-x)/2], 'k', alpha=0.2)\n    plt.plot([x, x + (1-x)/2], [0, 0 + (1-x)/2], 'k', alpha=0.2)\n\nplt.title(\"Change of predicted probabilities after sigmoid calibration\")\nplt.xlabel(\"Probability class 1\")\nplt.ylabel(\"Probability class 2\")\nplt.xlim(-0.05, 1.05)\nplt.ylim(-0.05, 1.05)\nplt.legend(loc=\"best\")\n\nprint(\"Log-loss of\")\nprint(\" * uncalibrated classifier trained on 800 datapoints: %.3f \"\n      % score)\nprint(\" * classifier trained on 600 datapoints and calibrated on \"\n      \"200 datapoint: %.3f\" % sig_score)\n\n# Illustrate calibrator\nplt.figure()\n# generate grid over 2-simplex\np1d = np.linspace(0, 1, 20)\np0, p1 = np.meshgrid(p1d, p1d)\np2 = 1 - p0 - p1\np = np.c_[p0.ravel(), p1.ravel(), p2.ravel()]\np = p[p[:, 2] >= 0]\n\ncalibrated_classifier = sig_clf.calibrated_classifiers_[0]\nprediction = np.vstack([calibrator.predict(this_p)\n                        for calibrator, this_p in\n                        zip(calibrated_classifier.calibrators, p.T)]).T\nprediction /= prediction.sum(axis=1)[:, None]\n\n# Plot modifications of calibrator\nfor i in range(prediction.shape[0]):\n    plt.arrow(p[i, 0], p[i, 1],\n              prediction[i, 0] - p[i, 0], prediction[i, 1] - p[i, 1],\n              head_width=1e-2, color=colors[np.argmax(p[i])])\n# Plot boundaries of unit simplex\nplt.plot([0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], 'k', label=\"Simplex\")\n\nplt.grid(False)\nfor x in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:\n    plt.plot([0, x], [x, 0], 'k', alpha=0.2)\n    plt.plot([0, 0 + (1-x)/2], [x, x + (1-x)/2], 'k', alpha=0.2)\n    plt.plot([x, x + (1-x)/2], [0, 0 + (1-x)/2], 'k', alpha=0.2)\n\n # sigmoid\u6821\u51c6\u5668\u56fe\u793a\nplt.title(\"sigmoid \")\nplt.xlabel(\"Probability class 1\")\nplt.ylabel(\"Probability class 2\")\n# .xlim\u662f\u8bbe\u7f6ex\u8f74\u7684\u8303\u56f4\nplt.xlim(-0.05, 1.05)\n# .ylim\u662f\u8bbe\u7f6ey\u8f74\u7684\u8303\u56f4\nplt.ylim(-0.05, 1.05)\n\nplt.show()\n")))}f.isMDXComponent=!0}}]);