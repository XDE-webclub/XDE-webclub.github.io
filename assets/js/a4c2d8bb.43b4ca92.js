"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[4702],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=o(n),m=a,d=f["".concat(p,".").concat(m)]||f[m]||u[m]||l;return n?r.createElement(d,c(c({ref:t},s),{},{components:n})):r.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,c=new Array(l);c[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[f]="string"==typeof e?e:a,c[1]=i;for(var o=2;o<l;o++)c[o]=n[o];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var r=n(7462),a=(n(7294),n(3905));const l={},c=void 0,i={unversionedId:"\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/6\u51b3\u7b56\u6811-\u4e0a",id:"\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/6\u51b3\u7b56\u6811-\u4e0a",title:"6\u51b3\u7b56\u6811-\u4e0a",description:"\u51b3\u7b56\u6811",source:"@site/docs/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/6\u51b3\u7b56\u6811-\u4e0a.md",sourceDirName:"\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8",slug:"/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/6\u51b3\u7b56\u6811-\u4e0a",permalink:"/course/docs/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/6\u51b3\u7b56\u6811-\u4e0a",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"5\u7ebf\u6027\u56de\u5f52-\u4e0b",permalink:"/course/docs/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/5\u7ebf\u6027\u56de\u5f52-\u4e0b"},next:{title:"6\u51b3\u7b56\u6811-\u4e0b",permalink:"/course/docs/\u7b2c2\u90e8\u5206\u4f20\u7edf\u7b97\u6cd5\u5165\u95e8/6\u51b3\u7b56\u6811-\u4e0b"}},p={},o=[{value:"\u51b3\u7b56\u6811",id:"\u51b3\u7b56\u6811",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b",level:3}],s={toc:o},f="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u51b3\u7b56\u6811"},"\u51b3\u7b56\u6811"),(0,a.kt)("p",null,"\u51b3\u7b56\u6811\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\uff0c\u662f\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u6570\u636e\u6316\u6398\u7b97\u6cd5\u4e4b\u4e00\u3002"),(0,a.kt)("p",null,"\u51b3\u7b56\u6811\u6a21\u578b\u5448\u6811\u5f62\u7ed3\u6784\uff0c\u5728\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u8868\u793a\u57fa\u4e8e\u7279\u5f81\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\u7684\u8fc7\u7a0b\u3002\u5b83\u53ef\u4ee5\u8ba4\u4e3a\u662f if-else \u89c4\u5219\u7684\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5b9a\u4e49\u5728\u7279\u5f81\u7a7a\u95f4\u4e0e\u7c7b\u7a7a\u95f4\u4e0a\u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u3002"),(0,a.kt)("p",null,"\u51b3\u7b56\u6811\u5b66\u4e60\u901a\u5e38\u5305\u62ec 3 \u4e2a\u6b65\u9aa4\uff1a\u7279\u5f81\u9009\u62e9\u3001\u51b3\u7b56\u6811\u7684\u751f\u6210\u548c\u51b3\u7b56\u6811\u7684\u4fee\u526a\u3002"),(0,a.kt)("p",null,"\u51b3\u7b56\u6811\u5b66\u4e60\u7684\u635f\u5931\u51fd\u6570\u901a\u5e38\u662f\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u51fd\u6570\uff0c\u51b3\u7b56\u6811\u5b66\u4e60\u5c5e\u4e8e\u76d1\u7763\u5b66\u4e60\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5b66\u4e60\u4e00\u4e2a\u5206\u7c7b\u89c4\u5219\u3002"),(0,a.kt)("p",null,"\u51b3\u7b56\u6811\u67092\u79cd\u7c7b\u578b\uff1a\u5206\u7c7b\u6811\u548c\u56de\u5f52\u6811\u3002\u5206\u7c7b\u6811\u7684\u8f93\u51fa\u662f\u6837\u672c\u7684\u7c7b\u522b\uff0c\u56de\u5f52\u6811\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u5b9e\u6570\u3002\u65e5\u5e38\u4eba\u4eec\u6240\u8bf4\u7684\u51b3\u7b56\u6811\uff0c\u901a\u5e38\u662f\u6307CART\u51b3\u7b56\u6811\uff0c\u751a\u81f3\u662f\u6307CART\u51b3\u7b56\u6811\u4e2d\u7684\u5206\u7c7b\u6811."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.datasets import load_iris\nfrom sklearn import tree\nimport numpy  as np\niris = load_iris() \n\nclf = tree.DecisionTreeClassifier(min_samples_leaf=15)  \nclf = clf.fit(iris.data, iris.target)\n# \u51b3\u7b56\u6811\u6a21\u578b\u4e3a:\u5148\u5de6\u540e\u53f3\uff0c\u5148\u4e0a\u540e\u4e0b \u8d1f\u6570\u8868\u793a\u6ca1\u6709\nprint("\u6811\u7ed3\u6784-\u5de6\u8282\u70b9\uff1a"+str(clf.tree_.children_left))\nprint("\u6811\u7ed3\u6784-\u53f3\u8282\u70b9\uff1a"+str(clf.tree_.children_right))\nprint("\u8282\u70b9\u5206\u88c2\u7279\u5f81\uff1a"+str(clf.tree_.feature))\nprint("\u8282\u70b9\u5206\u88c2\u9608\u503c\uff1a"+str(np.round(clf.tree_.threshold,2)))\nprint("\u8282\u70b9\u7c7b\u522b\uff1a"+str(clf.classes_.take( [ np.argmax(i) for i in clf.tree_.value])))\n')),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://bbbdata.com/img/cnt/text/ml/202212/a87c5d0c-d3b2-4f33-bd7b-52e6c3cf4271.png",alt:null})),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://bbbdata.com/img/cnt/text/ml/202205/34b41478-e3ca-4bbb-84b4-e02dba1e56c8.png",alt:null})),(0,a.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b"},"\u7b80\u5355\u793a\u4f8b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.tree import DecisionTreeClassifier\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nclf = DecisionTreeClassifier(random_state=0)\n# \u8ba1\u7b97\u6700\u5c0f\u6210\u672c\u590d\u6742\u6027\u4fee\u526a\u671f\u95f4\u7684\u4fee\u526a\u8def\u5f84\npath = clf.cost_complexity_pruning_path(X_train, y_train)\n# \u4ece\u8def\u5f84\u4e2d\u63d0\u53d6alpha\u503c\u548c\u76f8\u5e94\u7684\u51b3\u7b56\u6811\n# \u526a\u679d\u671f\u95f4\u5b50\u6811\u7684\u6709\u6548 alpha\n# \u4ee3\u4ef7\u590d\u6742\u5ea6\u526a\u679d\u6cd5\uff0c\u5b9e\u8d28\u5c31\u662f\u5728\u6811\u7684\u590d\u6742\u5ea6\u4e0e\u51c6\u786e\u6027\u4e4b\u95f4\u53d6\u5f97\u4e00\u4e2a\u5e73\u8861\u70b9\u3002\n# \u539f\u7406\u53c2\u8003\uff1ahttps://blog.csdn.net/ywj_1991/article/details/126846155\nccp_alphas, impurities = path.ccp_alphas, path.impurities\n\n# \u5728 DecisionTreeClassifier\u4e2d\uff0c \u8fd9\u79cd\u526a\u679d\u6280\u672f\u662f\u901a\u8fc7\u6210\u672c\u590d\u6742\u5ea6\u53c2\u6570ccp_alpha\u6765\u53c2\u6570\u5316\u7684\u3002\u66f4\u5927\u7684ccp_alpha\u503c\u589e\u52a0\u88ab\u526a\u679d\u7684\u8282\u70b9\u6570\u3002\nclfs = []\n# ccp_alphas\u7684\u503c\u662f\u901a\u8fc7cost_complexity_pruning_path\u83b7\u5f97\u7684\nfor ccp_alpha in ccp_alphas:\n    # \u6bcf\u4e2a\u5faa\u73af\u521b\u5efa\u4e00\u4e2a\u51b3\u7b56\u6811\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    # \u62df\u5408\u51b3\u7b56\u6811\n    clf.fit(X_train, y_train)\n    # \u51b3\u7b56\u6811\u6a21\u578b\u4e3a:\u5148\u5de6\u540e\u53f3\uff0c\u5148\u4e0a\u540e\u4e0b \u8d1f\u6570\u8868\u793a\u6ca1\u6709\n    print("{} | \u6811\u7ed3\u6784-\u5de6\u8282\u70b9\u957f\u5ea6\uff1a{}\uff0c\u6811\u7ed3\u6784-\u53f3\u8282\u70b9\u957f\u5ea6\uff1a{}".format(ccp_alpha,len(clf.tree_.children_right),len(clf.tree_.children_left)))\n\n    # \u5c06\u51b3\u7b56\u6811\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n    clfs.append(clf)\nprint("Number of nodes in the last tree is: {} with ccp_alpha: {}".format(\n      clfs[-1].tree_.node_count, ccp_alphas[-1]))\n# \u5220\u9664 ccp_alphas\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff0c \u56e0\u4e3a\u5b83\u5bf9\u5e94\u4e8e\u5b8c\u5168\u672a\u526a\u679d\u7684\u6811\nclfs = clfs[:-1]\n# ccp_alphas\u4e5f\u9700\u8981\u5220\u9664\u6700\u540e\u4e00\u4e2a\u503c\uff0c \u56e0\u4e3a\u5b83\u662f\u5b8c\u5168\u672a\u526a\u679d\u7684\u6811\u5bf9\u5e94\u7684\u503c\nccp_alphas = ccp_alphas[:-1]\n')))}u.isMDXComponent=!0}}]);