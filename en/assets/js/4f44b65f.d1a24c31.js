"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[8772],{7429:(n,e,d)=>{d.r(e),d.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>x,frontMatter:()=>s,metadata:()=>l,toc:()=>h});var i=d(4848),t=d(8453);const s={sidebar_position:0},r=void 0,l={id:"\u7b2c2\u90e8\u5206\u4eba\u5de5\u667a\u80fd\u5f15\u8a00/0\u8bfb\u53d6BMP\u6587\u4ef6",title:"0\u8bfb\u53d6BMP\u6587\u4ef6",description:"\u4e2a\u4eba\u7684\u7ecf\u9a8c\u53ef\u4ee5\u88ab\u6574\u7406\u6210\u67d0\u79cd\u89c4\u5f8b\uff0c",source:"@site/docs/\u7b2c2\u90e8\u5206\u4eba\u5de5\u667a\u80fd\u5f15\u8a00/0\u8bfb\u53d6BMP\u6587\u4ef6.md",sourceDirName:"\u7b2c2\u90e8\u5206\u4eba\u5de5\u667a\u80fd\u5f15\u8a00",slug:"/\u7b2c2\u90e8\u5206\u4eba\u5de5\u667a\u80fd\u5f15\u8a00/0\u8bfb\u53d6BMP\u6587\u4ef6",permalink:"/en/docs/\u7b2c2\u90e8\u5206\u4eba\u5de5\u667a\u80fd\u5f15\u8a00/0\u8bfb\u53d6BMP\u6587\u4ef6",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"\u6570\u636e\u79d1\u5b66\u5165\u95e8",permalink:"/en/docs/\u7b2c1\u90e8\u5206Python\u57fa\u7840\u77e5\u8bc6/\u6570\u636e\u79d1\u5b66\u5165\u95e8"},next:{title:"1\u4eba\u5de5\u667a\u80fd\u6982\u8ff0",permalink:"/en/docs/\u7b2c2\u90e8\u5206\u4eba\u5de5\u667a\u80fd\u5f15\u8a00/1\u4eba\u5de5\u667a\u80fd\u6982\u8ff0"}},c={},h=[{value:"\u8bfb\u53d6BMP\u6587\u4ef6",id:"\u8bfb\u53d6bmp\u6587\u4ef6",level:2},{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3}];function a(n){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"\u4e2a\u4eba\u7684\u7ecf\u9a8c\u53ef\u4ee5\u88ab\u6574\u7406\u6210\u67d0\u79cd\u89c4\u5f8b\uff0c"}),"\n",(0,i.jsx)(e.p,{children:"\u9488\u5bf9\u67d0\u4e2a\u4e8b\u9879\u7684\u89c4\u5f8b\u96c6\u5408\u8d77\u6765\u4fbf\u6210\u4e86\u7b97\u6cd5\uff0c"}),"\n",(0,i.jsx)(e.p,{children:"\u7b97\u6cd5\u662f\u673a\u5668\u5b66\u4e60\u7684\u6838\u5fc3\uff0c"}),"\n",(0,i.jsx)(e.p,{children:"\u6211\u4eec\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u5b8c\u6210\u4eba\u5de5\u667a\u80fd\uff08AI\uff09\u7684\u6784\u5efa\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u7ed9\u4f60\u4e00\u5f20\u56fe\u7247\uff0c\u4f60\u53ef\u4ee5\u5206\u8fa8\u51fa\u662f\u4ec0\u4e48\u989c\u8272\uff0c\u601d\u8003\u4e0b\u5982\u4f55\u8ba9\u673a\u5668\u5b8c\u6210\uff1f"}),"\n",(0,i.jsx)(e.h2,{id:"\u8bfb\u53d6bmp\u6587\u4ef6",children:"\u8bfb\u53d6BMP\u6587\u4ef6"}),"\n",(0,i.jsx)(e.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,i.jsx)(e.p,{children:"\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757\u7684\u524d\u63d0\u4e0b\uff0c\u5b8c\u6210\u5bf924\u4f4dbmp\u56fe\u50cf\u7684\u56fe\u50cf\u6570\u636e\u5206\u6790\u4e0e\u50cf\u7d20\u8bfb\u53d6\u3002\n\u7a0b\u5e8f\u8bbe\u8ba1\u9700\u8981\u4f53\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u7279\u70b9\uff0c\u4ee5\u521b\u5efa\u7c7b\u7684\u5f62\u5f0f\u7f16\u5199\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u53c2\u8003\u8d44\u6599\uff1a"}),"\n",(0,i.jsx)(e.p,{children:"\u4ee5\u4e00\u5f202*2\u768424\u4f4d\u56fe\u7684bmp\u683c\u5f0f\u56fe\u7247\u4e3a\u4f8b"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Offset"}),(0,i.jsx)(e.th,{children:"Offset10"}),(0,i.jsx)(e.th,{children:"Size"}),(0,i.jsx)(e.th,{children:"Hex value"}),(0,i.jsx)(e.th,{children:"Value"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"BMP Header"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"0h"}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"42 4D"}),(0,i.jsx)(e.td,{children:'"BM"'}),(0,i.jsx)(e.td,{children:"ID field (42h, 4Dh)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"2h"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"46\xa000\xa000\xa000"}),(0,i.jsx)(e.td,{children:"70 bytes (54+16)"}),(0,i.jsx)(e.td,{children:"BMP \u6587\u4ef6\u7684\u5927\u5c0f\uff0854 \u5b57\u8282\u6807\u5934 + 16 \u5b57\u8282\u6570\u636e\uff09"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"6h"}),(0,i.jsx)(e.td,{children:"6"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"00 00"}),(0,i.jsx)(e.td,{children:"Unused"}),(0,i.jsx)(e.td,{children:"\u7279\u5b9a\u5e94\u7528"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"8h"}),(0,i.jsx)(e.td,{children:"8"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"00 00"}),(0,i.jsx)(e.td,{children:"Unused"}),(0,i.jsx)(e.td,{children:"\u7279\u5b9a\u5e94\u7528"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Ah"}),(0,i.jsx)(e.td,{children:"10"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"36 00 00 00"}),(0,i.jsx)(e.td,{children:"54 bytes (14+40)"}),(0,i.jsx)(e.td,{children:"\u53ef\u4ee5\u627e\u5230\u50cf\u7d20\u9635\u5217\uff08\u4f4d\u56fe\u6570\u636e\uff09\u7684\u504f\u79fb\u91cf"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"DIB Header-Device Independent Bitmaps-\u8bbe\u5907\u65e0\u5173\u4f4d\u56fe"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Eh"}),(0,i.jsx)(e.td,{children:"14"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"28 00 00 00"}),(0,i.jsx)(e.td,{children:"40 bytes"}),(0,i.jsx)(e.td,{children:"DIB \u5934\u4e2d\u7684\u5b57\u8282\u6570\uff08\u4ece\u6b64\u65f6\u5f00\u59cb\uff09"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"12h"}),(0,i.jsx)(e.td,{children:"18"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"02 00 00 00"}),(0,i.jsx)(e.td,{children:"2 pixels (left to right order)"}),(0,i.jsx)(e.td,{children:"\u4f4d\u56fe\u7684\u5bbd\u5ea6\uff08\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"16h"}),(0,i.jsx)(e.td,{children:"22"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"02 00 00 00"}),(0,i.jsx)(e.td,{children:"2 pixels (bottom to top order)"}),(0,i.jsx)(e.td,{children:"\u4f4d\u56fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09\u3002\u4ece\u4e0b\u5230\u4e0a\u7684\u50cf\u7d20\u987a\u5e8f\u4e3a\u6b63\u3002"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"1Ah"}),(0,i.jsx)(e.td,{children:"26"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"01 00"}),(0,i.jsx)(e.td,{children:"1 plane"}),(0,i.jsx)(e.td,{children:"\u4f7f\u7528\u7684\u989c\u8272\u5e73\u9762\u6570\u91cf"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"1Ch"}),(0,i.jsx)(e.td,{children:"28"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"18 00"}),(0,i.jsx)(e.td,{children:"24 bits"}),(0,i.jsx)(e.td,{children:"\u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4d\u6570"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"1Eh"}),(0,i.jsx)(e.td,{children:"30"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"00 00 00 00"}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"BI_RGB\uff0c\u672a\u4f7f\u7528\u50cf\u7d20\u9635\u5217\u538b\u7f29"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"22h"}),(0,i.jsx)(e.td,{children:"34"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"10 00 00 00"}),(0,i.jsx)(e.td,{children:"16 bytes"}),(0,i.jsx)(e.td,{children:"\u539f\u59cb\u4f4d\u56fe\u6570\u636e\u7684\u5927\u5c0f\uff08\u5305\u62ec\u586b\u5145\uff09"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"26h"}),(0,i.jsx)(e.td,{children:"38"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"13 0B 00 00"}),(0,i.jsx)(e.td,{children:"2835 pixels/metre horizontal"}),(0,i.jsx)(e.td,{children:"\u56fe\u50cf\u7684\u6253\u5370\u5206\u8fa8\u7387\uff0c"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"2Ah"}),(0,i.jsx)(e.td,{children:"42"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"13 0B 00 00"}),(0,i.jsx)(e.td,{children:"2835 pixels/metre vertical"}),(0,i.jsx)(e.td,{children:"72 DPI\xa0\xd7 39.3701 inches per metre yields 2834.6472"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"2Eh"}),(0,i.jsx)(e.td,{children:"46"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"00 00 00 00"}),(0,i.jsx)(e.td,{children:"0 colors"}),(0,i.jsx)(e.td,{children:"\u8c03\u8272\u677f\u4e2d\u7684\u989c\u8272\u6570\u91cf"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"32h"}),(0,i.jsx)(e.td,{children:"50"}),(0,i.jsx)(e.td,{children:"4"}),(0,i.jsx)(e.td,{children:"00 00 00 00"}),(0,i.jsx)(e.td,{children:"0 important colors"}),(0,i.jsx)(e.td,{children:"0 \u8868\u793a\u6240\u6709\u989c\u8272\u90fd\u5f88\u91cd\u8981"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Start of pixel array (bitmap data)"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"36h"}),(0,i.jsx)(e.td,{children:"54"}),(0,i.jsx)(e.td,{children:"3"}),(0,i.jsx)(e.td,{children:"00 00 FF"}),(0,i.jsx)(e.td,{children:"0 0 255"}),(0,i.jsx)(e.td,{children:"Red, Pixel (x=0, y=1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"39h"}),(0,i.jsx)(e.td,{children:"57"}),(0,i.jsx)(e.td,{children:"3"}),(0,i.jsx)(e.td,{children:"FF FF FF"}),(0,i.jsx)(e.td,{children:"255 255 255"}),(0,i.jsx)(e.td,{children:"White, Pixel (x=1, y=1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"3Ch"}),(0,i.jsx)(e.td,{children:"60"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"00 00"}),(0,i.jsx)(e.td,{children:"0 0"}),(0,i.jsx)(e.td,{children:"Padding for 4 byte alignment (could be a value other than zero)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"3Eh"}),(0,i.jsx)(e.td,{children:"62"}),(0,i.jsx)(e.td,{children:"3"}),(0,i.jsx)(e.td,{children:"FF 00 00"}),(0,i.jsx)(e.td,{children:"255 0 0"}),(0,i.jsx)(e.td,{children:"Blue, Pixel (x=0, y=0)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"41h"}),(0,i.jsx)(e.td,{children:"65"}),(0,i.jsx)(e.td,{children:"3"}),(0,i.jsx)(e.td,{children:"00 FF 00"}),(0,i.jsx)(e.td,{children:"0 255 0"}),(0,i.jsx)(e.td,{children:"Green, Pixel (x=1, y=0)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"44h"}),(0,i.jsx)(e.td,{children:"68"}),(0,i.jsx)(e.td,{children:"2"}),(0,i.jsx)(e.td,{children:"00 00"}),(0,i.jsx)(e.td,{children:"0 0"}),(0,i.jsx)(e.td,{children:"Padding for 4 byte alignment (could be a value other than zero)"})]})]})]}),"\n",(0,i.jsx)(e.p,{children:"bit\uff08\u4f4d\uff09\u6bd4\u7279\u662f\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u57fa\u7840\uff0c\u5c5e\u4e8e\u4e8c\u8fdb\u5236\u7684\u8303\u7574"}),"\n",(0,i.jsx)(e.p,{children:"byte\u5b57\u8282\u662f\u5185\u5b58\u7684\u57fa\u672c\u5355\u4f4d"}),"\n",(0,i.jsx)(e.p,{children:"8 bit = 1 byte"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'# \u53c2\u8003\u77e5\u8bc6\n\ndata = b\'\\xff\' # b\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\\x\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u7684\u6570\u636e\n\nbin_data = bin(int.from_bytes(data))[2:]  # -> 11111111\n\nint(bin_data, 2) # -> 255\n\n# \u6253\u5f00\u6587\u4ef6\u4f5c\u4e3a\u53ef\u7f16\u8f91\u5bf9\u8c61\nwith open("r.bmp", "rb") as f:\n    d = f.read()\n    data = bytearray(d)\n# \u8bd5\u7740\u628a54\u5230246\u7684\u6570\u636e\u90fd\u6539\u62100x00\uff0c\u5373\u9ed1\u8272\u3002\u8fd9\u6837\u6574\u5f20\u56fe\u7247\u90fd\u53d8\u6210\u9ed1\u8272\u4e86\nfor i in range(54, 246):\n    data[i]= 0x00\n# \u4fdd\u5b58\u6587\u4ef6\nwith open("black.bmp", "wb") as f:\n    f.write(data)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'class Readbmp:\n    """\n    read bmp files\n    \u56fe\u7247\u7684\u683c\u5f0f\u8bf4\u660e\uff1ahttps://en.wikipedia.org/wiki/BMP_file_format#Example_1\n    """\n\n    def __init__(self, pic_path) -> None:\n        self.pic_path = pic_path\n        self.read_color()\n\n    def read_color(self):\n        if self.pic_path.endswith(".bmp"):\n            self.read_bmp()\n        else:\n            print("\u4e0d\u652f\u6301\u7684\u683c\u5f0f")\n\n    def read_bmp(self):\n        bin_datas = []\n        """read file data to bin"""\n        with open(self.pic_path, "rb") as f:\n            while True:\n                if len(bin_datas) == f.tell():\n                    data = f.read(1)\n                    bindata = bin(int.from_bytes(data))[2:]\n                    if len(bindata) < 8:\n                        bindata = (8 - len(bindata)) * "0" + bindata\n                    bin_datas.append(bindata)\n                else:\n                    bin_datas = bin_datas[:-1]\n                    break\n\n        self.bin_pic_head = bin_datas[0:2]  # ID field\n        self.bin_pic_size = bin_datas[2:6]  # Size of the BMP file \u6587\u4ef6\u5927\u5c0f\n        self.bin_pic_exe = bin_datas[6:10]  # \u7279\u5b9a\u5e94\u7528\uff0c\u9ed8\u8ba4\u4e3a0\n        self.bin_pic_address = bin_datas[10:14]  # \u56fe\u7247\u4fe1\u606f\u5f00\u59cb\u5730\u5740\n        self.bin_pic_dib = bin_datas[14:18]  # DIB \u5934\u4e2d\u7684\u5b57\u8282\u6570\n        self.bin_pic_w = bin_datas[18:22]  # \u56fe\u7247\u50cf\u7d20\u5bbd\u5ea6\n        self.bin_pic_h = bin_datas[22:26]  # \u56fe\u7247\u50cf\u7d20\u9ad8\u5ea6\n        self.bin_pic_color_num = bin_datas[26:28]  # \u4f7f\u7528\u989c\u8272\u5e73\u9762\u6570\n        self.bin_pic_color_long = bin_datas[28:30]  # \u6bcf\u4e2a\u50cf\u7d20\u4f4d\u6570\n        self.bin_pic_bi = bin_datas[30:34]  # BI_RGB\n        self.bin_pic_big = bin_datas[34:38]  # \u539f\u59cb\u56fe\u50cf\u6570\u636e\u5927\u5c0f\n        self.bin_pic_printpix = bin_datas[38:42]  # \u6253\u5370\u5206\u8fa8\u7387\n        self.bin_pic_dpi = bin_datas[42:46]  # DPI\n        self.bin_pic_color_num = bin_datas[46:50]  # \u8c03\u8272\u677f\u4e2d\u989c\u8272\u6570\u91cf\n        self.bin_pic_color_important = bin_datas[50:54]  # \u91cd\u8981\u989c\u8272\u6570\u91cf\n        self.bin_pic_data = bin_datas[54:]  # \u56fe\u7247\u6570\u636e\n        self.bin_to_pic()\n\n    # \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u5316\u6210\u5341\u8fdb\u5236\u6570\u636e\n    def bin_to_dec(self, bin_datas):\n        bin_data = ""\n        for i in reversed(bin_datas):\n            bin_data += i\n        return int(bin_data, 2)\n\n    # \u5c06\u5217\u8868\u8f6c\u4e3a3\u4e2a\u4e00\u7ec4\u7684\u4e8c\u7ef4\u5217\u8868\n    def change_data(self, data):\n        data_2d = []\n        x = []\n        for i in data:\n            x.append(int(i, 2))\n            if len(x) == 3:\n                data_2d.append(tuple(x))\n                x = []\n        return data_2d\n\n    # \u5904\u7406\u56fe\u7247\u6570\u636e\n    def bin_to_pic(self):\n        self.pic_head = chr(int(self.bin_pic_head[0], 2)) + chr(\n            int(self.bin_pic_head[1], 2)\n        )\n        self.pic_size = self.bin_to_dec(self.bin_pic_size)\n        self.pic_exe = self.bin_to_dec(self.bin_pic_exe)\n        self.pic_address = self.bin_to_dec(self.bin_pic_address)\n        self.pic_dib = self.bin_to_dec(self.bin_pic_dib)\n        self.pic_w = self.bin_to_dec(self.bin_pic_w)\n        self.pic_h = self.bin_to_dec(self.bin_pic_h)\n        self.pic_color_num = self.bin_to_dec(self.bin_pic_color_num)\n        self.pic_color_long = self.bin_to_dec(self.bin_pic_color_long)\n        self.pic_bi = self.bin_to_dec(self.bin_pic_bi)\n        self.pic_big = self.bin_to_dec(self.bin_pic_big)\n        self.pic_printpix = self.bin_to_dec(self.bin_pic_printpix)\n        self.pic_dpi = self.bin_to_dec(self.bin_pic_dpi)\n        self.pic_color_num = self.bin_to_dec(self.bin_pic_color_num)\n        self.pic_color_important = self.bin_to_dec(self.bin_pic_color_important)\n        self.pic_data = self.change_data(self.bin_pic_data)\n\n    # \u6253\u5370\u56fe\u7247\u4fe1\u606f\n    def show(self):\n        print(\n            """\n\u6587\u4ef6ID  {} \n\u56fe\u50cf\u5927\u5c0f(Byte)  {}   \n\u7279\u5b9a\u5e94\u7528  {}   \n\u56fe\u7247\u4fe1\u606f\u5f00\u59cb\u5730\u5740  {}   \nDIB \u5934\u4e2d\u7684\u5b57\u8282\u6570 {}   \n\u56fe\u7247\u50cf\u7d20\u5bbd\u5ea6  {}   \n\u56fe\u7247\u50cf\u7d20\u9ad8\u5ea6  {}   \n\u4f7f\u7528\u989c\u8272\u5e73\u9762\u6570  {}   \n\u6bcf\u4e2a\u50cf\u7d20\u4f4d\u6570  {}   \nBI_RGB  {}   \n\u539f\u59cb\u56fe\u50cf\u6570\u636e\u5927\u5c0f(Byte) {} \n\u6253\u5370\u5206\u8fa8\u7387  {}   \nDPI  {}   \n\u8c03\u8272\u677f\u4e2d\u989c\u8272\u6570\u91cf  {}   \n\u91cd\u8981\u989c\u8272\u6570\u91cf  {}   \n\u56fe\u7247\u6570\u636e  {} .... {} \n""".format(\n                self.pic_head,\n                self.pic_size,\n                self.pic_exe,\n                self.pic_address,\n                self.pic_dib,\n                self.pic_w,\n                self.pic_h,\n                self.pic_color_num,\n                self.pic_color_long,\n                self.pic_bi,\n                self.pic_big,\n                self.pic_printpix,\n                self.pic_dpi,\n                self.pic_color_num,\n                self.pic_color_important,\n                self.pic_data[:5],\n                self.pic_data[-5:],\n            )\n        )\n\n    # \u5224\u65ad\u989c\u8272\n    def color(self, color):\n        b, g, r = color[0], color[1], color[2]\n        if r == 0 and g == 0 and b == 0:\n            return "\u9ed1\u8272"\n        elif r == 0 and g == 0 and b == 255:\n            return "\u84dd\u8272"\n        elif r == 0 and g == 255 and b == 0:\n            return "\u7eff\u8272"\n        elif r == 255 and g == 0 and b == 0:\n            return "\u7ea2\u8272"\n        elif r == 255 and g == 255 and b == 255:\n            return "\u767d\u8272"\n        else:\n            return "\u5176\u4ed6\u989c\u8272"\n\n    # \u7edf\u8ba1\u989c\u8272\n    def count_color(self):\n        color_dict = {}\n        for i in self.pic_data:\n            if i in color_dict:\n                color_dict[i] += 1\n            else:\n                color_dict[i] = 1\n        return color_dict\n\n    # \u5224\u65ad\u989c\u8272\u7684\u6bd4\u4f8b\n    def color_percent(self):\n        color_dict = self.count_color()\n        color_percent_dict = {}\n        for i in color_dict:\n            color_percent_dict[self.color(i)] = int(\n                color_dict[i] / len(self.pic_data) * 100\n            )\n        for i in color_percent_dict:\n            print("{} \u5360\u6bd4\u767e\u5206\u4e4b {}".format(i, color_percent_dict[i]))\n\n\n\n\n\np = Readbmp("r.bmp")  # \u53e6\u5b58\u4e3a\u65b0\u6587\u4ef6\np.color_percent()\n# \u7ea2\u8272 \u5360\u6bd4\u767e\u5206\u4e4b 100\n"""\nr.bmp\u662f8*8\u7684\u4f4d\u56fe\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u70b9\u662f\u7ea2\u8272\uff0c\u5176\u4ed6\u90fd\u662f\u9ed1\u8272\n"""\n# \u6253\u5f00\u6587\u4ef6\u4f5c\u4e3a\u53ef\u7f16\u8f91\u5bf9\u8c61\nwith open("r.bmp", "rb") as f:\n    d = f.read()\n    data = bytearray(d)\n# \u8bd5\u7740\u628a54\u5230246\u7684\u6570\u636e\u90fd\u6539\u62100x00\uff0c\u5373\u9ed1\u8272\u3002\u8fd9\u6837\u6574\u5f20\u56fe\u7247\u90fd\u53d8\u6210\u9ed1\u8272\u4e86\uff08\u4e5f\u53ef\u4ee5\u53ea\u66f4\u6539\u67d0\u4e2a\u6570\u636e\u7aef\uff09\nfor i in range(54, 246):\n    data[i]= 0x00\n# \u4fdd\u5b58\u6587\u4ef6\nwith open("rn.bmp", "wb") as f:\n    f.write(data)\n\np = Readbmp("rn.bmp")\np.show()\np.color_percent()\n# \u9ed1\u8272 \u5360\u6bd4\u767e\u5206\u4e4b 100\n'})})]})}function x(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}},8453:(n,e,d)=>{d.d(e,{R:()=>r,x:()=>l});var i=d(6540);const t={},s=i.createContext(t);function r(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);